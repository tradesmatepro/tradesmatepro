{"ast":null,"code":"// types and functions copied over from viem so this library doesn't depend on it\nexport function getAddress(address) {\n  if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {\n    throw new Error(`@supabase/auth-js: Address \"${address}\" is invalid.`);\n  }\n  return address.toLowerCase();\n}\nexport function fromHex(hex) {\n  return parseInt(hex, 16);\n}\nexport function toHex(value) {\n  const bytes = new TextEncoder().encode(value);\n  const hex = Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n  return '0x' + hex;\n}\n/**\n * Creates EIP-4361 formatted message.\n */\nexport function createSiweMessage(parameters) {\n  var _a;\n  const {\n    chainId,\n    domain,\n    expirationTime,\n    issuedAt = new Date(),\n    nonce,\n    notBefore,\n    requestId,\n    resources,\n    scheme,\n    uri,\n    version\n  } = parameters;\n  // Validate fields\n  {\n    if (!Number.isInteger(chainId)) throw new Error(`@supabase/auth-js: Invalid SIWE message field \"chainId\". Chain ID must be a EIP-155 chain ID. Provided value: ${chainId}`);\n    if (!domain) throw new Error(`@supabase/auth-js: Invalid SIWE message field \"domain\". Domain must be provided.`);\n    if (nonce && nonce.length < 8) throw new Error(`@supabase/auth-js: Invalid SIWE message field \"nonce\". Nonce must be at least 8 characters. Provided value: ${nonce}`);\n    if (!uri) throw new Error(`@supabase/auth-js: Invalid SIWE message field \"uri\". URI must be provided.`);\n    if (version !== '1') throw new Error(`@supabase/auth-js: Invalid SIWE message field \"version\". Version must be '1'. Provided value: ${version}`);\n    if ((_a = parameters.statement) === null || _a === void 0 ? void 0 : _a.includes('\\n')) throw new Error(`@supabase/auth-js: Invalid SIWE message field \"statement\". Statement must not include '\\\\n'. Provided value: ${parameters.statement}`);\n  }\n  // Construct message\n  const address = getAddress(parameters.address);\n  const origin = scheme ? `${scheme}://${domain}` : domain;\n  const statement = parameters.statement ? `${parameters.statement}\\n` : '';\n  const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`;\n  let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}${nonce ? `\\nNonce: ${nonce}` : ''}\\nIssued At: ${issuedAt.toISOString()}`;\n  if (expirationTime) suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`;\n  if (notBefore) suffix += `\\nNot Before: ${notBefore.toISOString()}`;\n  if (requestId) suffix += `\\nRequest ID: ${requestId}`;\n  if (resources) {\n    let content = '\\nResources:';\n    for (const resource of resources) {\n      if (!resource || typeof resource !== 'string') throw new Error(`@supabase/auth-js: Invalid SIWE message field \"resources\". Every resource must be a valid string. Provided value: ${resource}`);\n      content += `\\n- ${resource}`;\n    }\n    suffix += content;\n  }\n  return `${prefix}\\n${suffix}`;\n}","map":{"version":3,"names":["getAddress","address","test","Error","toLowerCase","fromHex","hex","parseInt","toHex","value","bytes","TextEncoder","encode","Array","from","byte","toString","padStart","join","createSiweMessage","parameters","chainId","domain","expirationTime","issuedAt","Date","nonce","notBefore","requestId","resources","scheme","uri","version","Number","isInteger","length","_a","statement","includes","origin","prefix","suffix","toISOString","content","resource"],"sources":["D:\\TradeMate Pro Webapp\\node_modules\\@supabase\\auth-js\\src\\lib\\web3\\ethereum.ts"],"sourcesContent":["// types and functions copied over from viem so this library doesn't depend on it\n\nexport type Hex = `0x${string}`\n\nexport type Address = Hex\n\nexport type EIP1193EventMap = {\n  accountsChanged(accounts: Address[]): void\n  chainChanged(chainId: string): void\n  connect(connectInfo: { chainId: string }): void\n  disconnect(error: { code: number; message: string }): void\n  message(message: { type: string; data: unknown }): void\n}\n\nexport type EIP1193Events = {\n  on<event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]): void\n  removeListener<event extends keyof EIP1193EventMap>(\n    event: event,\n    listener: EIP1193EventMap[event]\n  ): void\n}\n\nexport type EIP1193RequestFn = (args: { method: string; params?: unknown }) => Promise<unknown>\n\nexport type EIP1193Provider = EIP1193Events & {\n  address: string\n  request: EIP1193RequestFn\n}\n\nexport type EthereumWallet = EIP1193Provider\n\n/**\n * EIP-4361 message fields\n */\nexport type SiweMessage = {\n  /**\n   * The Ethereum address performing the signing.\n   */\n  address: Address\n  /**\n   * The [EIP-155](https://eips.ethereum.org/EIPS/eip-155) Chain ID to which the session is bound,\n   */\n  chainId: number\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority that is requesting the signing.\n   */\n  domain: string\n  /**\n   * Time when the signed authentication message is no longer valid.\n   */\n  expirationTime?: Date | undefined\n  /**\n   * Time when the message was generated, typically the current time.\n   */\n  issuedAt?: Date | undefined\n  /**\n   * A random string typically chosen by the relying party and used to prevent replay attacks.\n   */\n  nonce?: string\n  /**\n   * Time when the signed authentication message will become valid.\n   */\n  notBefore?: Date | undefined\n  /**\n   * A system-specific identifier that may be used to uniquely refer to the sign-in request.\n   */\n  requestId?: string | undefined\n  /**\n   * A list of information or references to information the user wishes to have resolved as part of authentication by the relying party.\n   */\n  resources?: string[] | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme of the origin of the request.\n   */\n  scheme?: string | undefined\n  /**\n   * A human-readable ASCII assertion that the user will sign.\n   */\n  statement?: string | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI referring to the resource that is the subject of the signing (as in the subject of a claim).\n   */\n  uri: string\n  /**\n   * The current version of the SIWE Message.\n   */\n  version: '1'\n}\n\nexport type EthereumSignInInput = SiweMessage\n\nexport function getAddress(address: string): Address {\n  if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {\n    throw new Error(`@supabase/auth-js: Address \"${address}\" is invalid.`)\n  }\n  return address.toLowerCase() as Address\n}\n\nexport function fromHex(hex: Hex): number {\n  return parseInt(hex, 16)\n}\n\nexport function toHex(value: string): Hex {\n  const bytes = new TextEncoder().encode(value)\n  const hex = Array.from(bytes, (byte) => byte.toString(16).padStart(2, '0')).join('')\n  return ('0x' + hex) as Hex\n}\n\n/**\n * Creates EIP-4361 formatted message.\n */\nexport function createSiweMessage(parameters: SiweMessage): string {\n  const {\n    chainId,\n    domain,\n    expirationTime,\n    issuedAt = new Date(),\n    nonce,\n    notBefore,\n    requestId,\n    resources,\n    scheme,\n    uri,\n    version,\n  } = parameters\n\n  // Validate fields\n  {\n    if (!Number.isInteger(chainId))\n      throw new Error(\n        `@supabase/auth-js: Invalid SIWE message field \"chainId\". Chain ID must be a EIP-155 chain ID. Provided value: ${chainId}`\n      )\n\n    if (!domain)\n      throw new Error(\n        `@supabase/auth-js: Invalid SIWE message field \"domain\". Domain must be provided.`\n      )\n\n    if (nonce && nonce.length < 8)\n      throw new Error(\n        `@supabase/auth-js: Invalid SIWE message field \"nonce\". Nonce must be at least 8 characters. Provided value: ${nonce}`\n      )\n\n    if (!uri)\n      throw new Error(`@supabase/auth-js: Invalid SIWE message field \"uri\". URI must be provided.`)\n\n    if (version !== '1')\n      throw new Error(\n        `@supabase/auth-js: Invalid SIWE message field \"version\". Version must be '1'. Provided value: ${version}`\n      )\n\n    if (parameters.statement?.includes('\\n'))\n      throw new Error(\n        `@supabase/auth-js: Invalid SIWE message field \"statement\". Statement must not include '\\\\n'. Provided value: ${parameters.statement}`\n      )\n  }\n\n  // Construct message\n  const address = getAddress(parameters.address)\n  const origin = scheme ? `${scheme}://${domain}` : domain\n  const statement = parameters.statement ? `${parameters.statement}\\n` : ''\n  const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`\n\n  let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}${\n    nonce ? `\\nNonce: ${nonce}` : ''\n  }\\nIssued At: ${issuedAt.toISOString()}`\n\n  if (expirationTime) suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`\n  if (notBefore) suffix += `\\nNot Before: ${notBefore.toISOString()}`\n  if (requestId) suffix += `\\nRequest ID: ${requestId}`\n  if (resources) {\n    let content = '\\nResources:'\n    for (const resource of resources) {\n      if (!resource || typeof resource !== 'string')\n        throw new Error(\n          `@supabase/auth-js: Invalid SIWE message field \"resources\". Every resource must be a valid string. Provided value: ${resource}`\n        )\n      content += `\\n- ${resource}`\n    }\n    suffix += content\n  }\n\n  return `${prefix}\\n${suffix}`\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}