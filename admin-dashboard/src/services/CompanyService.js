import { supabase, supabaseService } from '../supabaseClient';

/**
 * Industry-Standard Company Creation Service
 * Uses secure Edge Functions for all admin operations
 */
export class CompanyService {

  /**
   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS
   */
  static async createCompanyWithOwner(formData) {
    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;

    try {
      console.log('üöÄ Starting company creation - DIRECT DATABASE...');
      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });

      // Format phone number to international format if provided
      let formattedPhone = null;
      if (ownerPhone && ownerPhone.trim()) {
        // Remove all non-digits
        const digitsOnly = ownerPhone.replace(/\D/g, '');

        // Add +1 for US numbers if not already international format
        if (digitsOnly.length === 10) {
          formattedPhone = `+1${digitsOnly}`;
        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {
          formattedPhone = `+${digitsOnly}`;
        } else if (ownerPhone.startsWith('+')) {
          formattedPhone = ownerPhone; // Already formatted
        } else {
          console.warn('‚ö†Ô∏è Phone number format unclear, skipping:', ownerPhone);
          formattedPhone = null; // Skip invalid phone numbers
        }
        console.log('üì± Phone formatted:', ownerPhone, '‚Üí', formattedPhone);
      }

      // Step 1: Create the company (company_number will be auto-generated by database)
      const { data: company, error: companyError } = await supabase
        .from('companies')
        .insert({
          name: companyName,
          created_at: new Date().toISOString()
        })
        .select()
        .single();

      if (companyError) {
        console.error('‚ùå Company creation failed:', companyError);
        throw new Error(`Failed to create company: ${companyError.message}`);
      }

      console.log('‚úÖ Company created:', company);
      console.log('üî¢ Auto-generated company number:', company.company_number);

      // Step 2: Create auth user using SERVICE KEY (your app, your computer!)
      console.log('üîë Using service client for user creation...');
      console.log('üìß Creating auth user for:', ownerEmail);

      const { data: authUser, error: authError } = await supabaseService.auth.admin.createUser({
        email: ownerEmail,
        password: tempPassword,
        email_confirm: true,
        user_metadata: { role: ownerRole }
      });

      console.log('üîç Auth user creation result:', { authUser: authUser?.user?.email, error: authError });

      if (authError) {
        console.error('‚ùå Auth user creation failed:', authError);
        throw new Error(`Failed to create user: ${authError.message}`);
      }

      console.log('‚úÖ Auth user created:', authUser.user.email);

      // Step 3: Create users table record
      console.log('üë• Creating users table record...');
      const { data: userRecord, error: userError } = await supabase
        .from('users')
        .insert({
          auth_user_id: authUser.user.id,
          company_id: company.id,
          role: ownerRole
        })
        .select()
        .single();

      if (userError) {
        console.error('‚ùå Users table record creation failed:', userError);
        throw new Error(`Failed to create user record: ${userError.message}`);
      }

      console.log('‚úÖ Users table record created:', userRecord.id);

      // Step 4: Create or update profile
      console.log('üë§ Creating/updating profile for user ID:', authUser.user.id);

      // First check if profile already exists
      const { data: existingProfile } = await supabase
        .from('profiles')
        .select('id')
        .eq('user_id', authUser.user.id)
        .single();

      let profile;
      if (existingProfile) {
        console.log('üìù Profile exists, updating...');
        // Update existing profile
        const { data: updatedProfile, error: updateError } = await supabase
          .from('profiles')
          .update({
            first_name: ownerFirstName,
            last_name: ownerLastName,
            email: ownerEmail,
            phone: formattedPhone,
            role: ownerRole,
            company_id: company.id
          })
          .eq('user_id', authUser.user.id)
          .select()
          .single();

        if (updateError) {
          console.error('‚ùå Profile update failed:', updateError);
          throw new Error(`Failed to update profile: ${updateError.message}`);
        }
        profile = updatedProfile;
      } else {
        console.log('üÜï Creating new profile...');
        // Create new profile
        const { data: newProfile, error: createError } = await supabase
          .from('profiles')
          .insert({
            user_id: authUser.user.id,
            first_name: ownerFirstName,
            last_name: ownerLastName,
            email: ownerEmail,
            phone: formattedPhone,
            role: ownerRole,
            company_id: company.id
          })
          .select()
          .single();

        if (createError) {
          console.error('‚ùå Profile creation failed:', createError);
          throw new Error(`Failed to create profile: ${createError.message}`);
        }
        profile = newProfile;
      }

      console.log('üîç Profile result:', { profile: profile?.email });



      console.log('üéâ Company creation completed successfully!');
      console.log('‚úÖ VERIFICATION:');
      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');
      console.log('  üîê Auth User:', authUser.user.email, '(ID:', authUser.user.id, ')');
      console.log('  üë• Users Record:', userRecord.id, '(Role:', userRecord.role, ')');
      console.log('  üë§ Profile:', profile.email, '(Role:', profile.role, ')');

      return {
        company,
        authUser: authUser.user,
        userRecord,
        profile,
        success: true,
        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`
      };

    } catch (error) {
      console.error('‚ùå Company creation workflow failed:', error);
      throw error;
    }
  }

  /**
   * Get all companies - SIMPLE DIRECT DATABASE ACCESS
   */
  static async getAllCompanies() {
    try {
      console.log('üè¢ Fetching companies directly from database...');

      // Direct database query - simple companies only first
      const { data: companies, error } = await supabase
        .from('companies')
        .select(`
          id,
          name,
          created_at,
          created_by
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Database query failed:', error);
        throw new Error(`Failed to fetch companies: ${error.message}`);
      }

      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);
      return companies || [];

    } catch (error) {
      console.error('‚ùå Failed to fetch companies:', error);
      throw error;
    }
  }

  /**
   * Get company details with owner and employees via Edge Function
   */
  static async getCompanyDetails(companyId) {
    try {
      console.log('üè¢ Fetching company details via Edge Function for:', companyId);

      // Call secure Edge Function that handles profile fetching with service key
      const { data, error } = await supabase.functions.invoke('get-company-details', {
        body: { companyId }
      });

      if (error) {
        console.error('‚ùå Edge Function call failed:', error);
        throw new Error(`Failed to fetch company details: ${error.message}`);
      }

      if (!data.success) {
        console.error('‚ùå Company details fetch failed:', data.error);
        throw new Error(data.error || 'Company details fetch failed');
      }

      console.log('‚úÖ Company details fetched successfully');
      return data.company;

    } catch (error) {
      console.error('‚ùå Failed to fetch company details:', error);
      throw error;
    }
  }

  /**
   * Delete Company and All Associated Data
   */
  static async deleteCompany(companyId) {
    try {
      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);

      // Step 1: Get all profiles associated with this company
      const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('id, email')
        .eq('company_id', companyId);

      if (profilesError) {
        console.error('‚ùå Error fetching company profiles:', profilesError);
        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);
      }

      console.log('üë• Found profiles to delete:', profiles?.length || 0);

      // Step 2: Delete auth users (requires service key)
      if (profiles && profiles.length > 0) {
        for (const profile of profiles) {
          try {
            console.log('üîê Deleting auth user:', profile.email);
            const { error: authDeleteError } = await supabaseService.auth.admin.deleteUser(profile.id);

            if (authDeleteError) {
              console.error('‚ùå Failed to delete auth user:', profile.email, authDeleteError);
              // Continue with other deletions even if one fails
            } else {
              console.log('‚úÖ Auth user deleted:', profile.email);
            }
          } catch (error) {
            console.error('‚ùå Error deleting auth user:', profile.email, error);
            // Continue with other deletions
          }
        }
      }

      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)
      const { error: profileDeleteError } = await supabase
        .from('profiles')
        .delete()
        .eq('company_id', companyId);

      if (profileDeleteError) {
        console.error('‚ùå Error deleting profiles:', profileDeleteError);
        // Continue with company deletion
      } else {
        console.log('‚úÖ Profiles deleted');
      }

      // Step 4: Delete the company
      const { error: companyDeleteError } = await supabase
        .from('companies')
        .delete()
        .eq('id', companyId);

      if (companyDeleteError) {
        console.error('‚ùå Company deletion failed:', companyDeleteError);
        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);
      }

      console.log('‚úÖ Company deletion completed successfully');

      return {
        success: true,
        message: `Company and ${profiles?.length || 0} associated users deleted successfully`
      };

    } catch (error) {
      console.error('‚ùå Company deletion workflow failed:', error);
      throw error;
    }
  }
}