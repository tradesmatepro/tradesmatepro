{"ast":null,"code":"import { supabase, supabaseService } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    try {\n      var _authUser$user, _profile;\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Format phone number to international format if provided\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        // Remove all non-digits\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n\n        // Add +1 for US numbers if not already international format\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone; // Already formatted\n        } else {\n          console.warn('‚ö†Ô∏è Phone number format unclear, skipping:', ownerPhone);\n          formattedPhone = null; // Skip invalid phone numbers\n        }\n        console.log('üì± Phone formatted:', ownerPhone, '‚Üí', formattedPhone);\n      }\n\n      // Step 1: Create the company (company_number will be auto-generated by database)\n      const {\n        data: company,\n        error: companyError\n      } = await supabase.from('companies').insert({\n        name: companyName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (companyError) {\n        console.error('‚ùå Company creation failed:', companyError);\n        throw new Error(`Failed to create company: ${companyError.message}`);\n      }\n      console.log('‚úÖ Company created:', company);\n      console.log('üî¢ Auto-generated company number:', company.company_number);\n\n      // Step 2: Create auth user using SERVICE KEY (your app, your computer!)\n      console.log('üîë Using service client for user creation...');\n      console.log('üìß Creating auth user for:', ownerEmail);\n      const {\n        data: authUser,\n        error: authError\n      } = await supabaseService.auth.admin.createUser({\n        email: ownerEmail,\n        password: tempPassword,\n        email_confirm: true,\n        user_metadata: {\n          role: ownerRole\n        }\n      });\n      console.log('üîç Auth user creation result:', {\n        authUser: authUser === null || authUser === void 0 ? void 0 : (_authUser$user = authUser.user) === null || _authUser$user === void 0 ? void 0 : _authUser$user.email,\n        error: authError\n      });\n      if (authError) {\n        console.error('‚ùå Auth user creation failed:', authError);\n        throw new Error(`Failed to create user: ${authError.message}`);\n      }\n      console.log('‚úÖ Auth user created:', authUser.user.email);\n\n      // Step 3: Create users table record\n      console.log('üë• Creating users table record...');\n      const {\n        data: userRecord,\n        error: userError\n      } = await supabase.from('users').insert({\n        auth_user_id: authUser.user.id,\n        company_id: company.id,\n        role: ownerRole\n      }).select().single();\n      if (userError) {\n        console.error('‚ùå Users table record creation failed:', userError);\n        throw new Error(`Failed to create user record: ${userError.message}`);\n      }\n      console.log('‚úÖ Users table record created:', userRecord.id);\n\n      // Step 4: Create or update profile\n      console.log('üë§ Creating/updating profile for user ID:', authUser.user.id);\n\n      // First check if profile already exists\n      const {\n        data: existingProfile\n      } = await supabase.from('profiles').select('id').eq('id', authUser.user.id).single();\n      let profile;\n      if (existingProfile) {\n        console.log('üìù Profile exists, updating...');\n        // Update existing profile\n        const {\n          data: updatedProfile,\n          error: updateError\n        } = await supabase.from('profiles').update({\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          email: ownerEmail,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).eq('id', authUser.user.id).select().single();\n        if (updateError) {\n          console.error('‚ùå Profile update failed:', updateError);\n          throw new Error(`Failed to update profile: ${updateError.message}`);\n        }\n        profile = updatedProfile;\n      } else {\n        console.log('üÜï Creating new profile...');\n        // Create new profile\n        const {\n          data: newProfile,\n          error: createError\n        } = await supabase.from('profiles').insert({\n          id: authUser.user.id,\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          email: ownerEmail,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).select().single();\n        if (createError) {\n          console.error('‚ùå Profile creation failed:', createError);\n          throw new Error(`Failed to create profile: ${createError.message}`);\n        }\n        profile = newProfile;\n      }\n      console.log('üîç Profile result:', {\n        profile: (_profile = profile) === null || _profile === void 0 ? void 0 : _profile.email\n      });\n      console.log('üéâ Company creation completed successfully!');\n      console.log('‚úÖ VERIFICATION:');\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\n      console.log('  üîê Auth User:', authUser.user.email, '(ID:', authUser.user.id, ')');\n      console.log('  üë§ Profile:', profile.email, '(Role:', profile.role, ')');\n      return {\n        company,\n        authUser: authUser.user,\n        profile,\n        success: true,\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('üë• Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (requires service key)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('üîê Deleting auth user:', profile.email);\n            const {\n              error: authDeleteError\n            } = await supabaseService.auth.admin.deleteUser(profile.id);\n            if (authDeleteError) {\n              console.error('‚ùå Failed to delete auth user:', profile.email, authDeleteError);\n              // Continue with other deletions even if one fails\n            } else {\n              console.log('‚úÖ Auth user deleted:', profile.email);\n            }\n          } catch (error) {\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\n            // Continue with other deletions\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('‚úÖ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('‚úÖ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseService","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","_authUser$user","_profile","console","log","formattedPhone","trim","digitsOnly","replace","length","startsWith","warn","data","company","error","companyError","from","insert","name","created_at","Date","toISOString","select","single","Error","message","company_number","authUser","authError","auth","admin","createUser","email","password","email_confirm","user_metadata","role","user","userRecord","userError","auth_user_id","id","company_id","existingProfile","eq","profile","updatedProfile","updateError","update","first_name","last_name","phone","newProfile","createError","success","getAllCompanies","companies","order","ascending","getCompanyDetails","companyId","functions","invoke","body","deleteCompany","profiles","profilesError","authDeleteError","deleteUser","profileDeleteError","delete","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseService } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Format phone number to international format if provided\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        // Remove all non-digits\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n\r\n        // Add +1 for US numbers if not already international format\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone; // Already formatted\r\n        } else {\r\n          console.warn('‚ö†Ô∏è Phone number format unclear, skipping:', ownerPhone);\r\n          formattedPhone = null; // Skip invalid phone numbers\r\n        }\r\n        console.log('üì± Phone formatted:', ownerPhone, '‚Üí', formattedPhone);\r\n      }\r\n\r\n      // Step 1: Create the company (company_number will be auto-generated by database)\r\n      const { data: company, error: companyError } = await supabase\r\n        .from('companies')\r\n        .insert({\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        console.error('‚ùå Company creation failed:', companyError);\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company created:', company);\r\n      console.log('üî¢ Auto-generated company number:', company.company_number);\r\n\r\n      // Step 2: Create auth user using SERVICE KEY (your app, your computer!)\r\n      console.log('üîë Using service client for user creation...');\r\n      console.log('üìß Creating auth user for:', ownerEmail);\r\n\r\n      const { data: authUser, error: authError } = await supabaseService.auth.admin.createUser({\r\n        email: ownerEmail,\r\n        password: tempPassword,\r\n        email_confirm: true,\r\n        user_metadata: { role: ownerRole }\r\n      });\r\n\r\n      console.log('üîç Auth user creation result:', { authUser: authUser?.user?.email, error: authError });\r\n\r\n      if (authError) {\r\n        console.error('‚ùå Auth user creation failed:', authError);\r\n        throw new Error(`Failed to create user: ${authError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Auth user created:', authUser.user.email);\r\n\r\n      // Step 3: Create users table record\r\n      console.log('üë• Creating users table record...');\r\n      const { data: userRecord, error: userError } = await supabase\r\n        .from('users')\r\n        .insert({\r\n          auth_user_id: authUser.user.id,\r\n          company_id: company.id,\r\n          role: ownerRole\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (userError) {\r\n        console.error('‚ùå Users table record creation failed:', userError);\r\n        throw new Error(`Failed to create user record: ${userError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Users table record created:', userRecord.id);\r\n\r\n      // Step 4: Create or update profile\r\n      console.log('üë§ Creating/updating profile for user ID:', authUser.user.id);\r\n\r\n      // First check if profile already exists\r\n      const { data: existingProfile } = await supabase\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('id', authUser.user.id)\r\n        .single();\r\n\r\n      let profile;\r\n      if (existingProfile) {\r\n        console.log('üìù Profile exists, updating...');\r\n        // Update existing profile\r\n        const { data: updatedProfile, error: updateError } = await supabase\r\n          .from('profiles')\r\n          .update({\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .eq('id', authUser.user.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          console.error('‚ùå Profile update failed:', updateError);\r\n          throw new Error(`Failed to update profile: ${updateError.message}`);\r\n        }\r\n        profile = updatedProfile;\r\n      } else {\r\n        console.log('üÜï Creating new profile...');\r\n        // Create new profile\r\n        const { data: newProfile, error: createError } = await supabase\r\n          .from('profiles')\r\n          .insert({\r\n            id: authUser.user.id,\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          console.error('‚ùå Profile creation failed:', createError);\r\n          throw new Error(`Failed to create profile: ${createError.message}`);\r\n        }\r\n        profile = newProfile;\r\n      }\r\n\r\n      console.log('üîç Profile result:', { profile: profile?.email });\r\n\r\n\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ VERIFICATION:');\r\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\r\n      console.log('  üîê Auth User:', authUser.user.email, '(ID:', authUser.user.id, ')');\r\n      console.log('  üë§ Profile:', profile.email, '(Role:', profile.role, ')');\r\n\r\n      return {\r\n        company,\r\n        authUser: authUser.user,\r\n        profile,\r\n        success: true,\r\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (requires service key)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user:', profile.email);\r\n            const { error: authDeleteError } = await supabaseService.auth.admin.deleteUser(profile.id);\r\n\r\n            if (authDeleteError) {\r\n              console.error('‚ùå Failed to delete auth user:', profile.email, authDeleteError);\r\n              // Continue with other deletions even if one fails\r\n            } else {\r\n              console.log('‚úÖ Auth user deleted:', profile.email);\r\n            }\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}