{"ast":null,"code":"import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\n    let createdCompanyId = null;\n    let createdAuthUserId = null;\n    try {\n      var _profile, _profile2;\n      console.log('üöÄ Starting ATOMIC company creation workflow...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Format phone number to international format if provided\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone;\n        } else {\n          console.warn('‚ö†Ô∏è Phone number format unclear, skipping:', ownerPhone);\n          formattedPhone = null;\n        }\n        console.log('üì± Phone formatted:', ownerPhone, '‚Üí', formattedPhone);\n      }\n\n      // Step 1: Check if auth user already exists (idempotent check)\n      console.log('üîç Step 1: Checking if auth user exists:', ownerEmail);\n      let authUserId = null;\n      let authUserExists = false;\n      if (hasAdminBypass && supabaseAdmin) {\n        const {\n          data: existingAuthUsers,\n          error: listError\n        } = await supabaseAdmin.auth.admin.listUsers();\n        if (!listError) {\n          const existingUser = existingAuthUsers.users.find(u => u.email === ownerEmail);\n          if (existingUser) {\n            console.log('‚ö†Ô∏è  Auth user already exists, will reuse:', existingUser.id);\n            authUserId = existingUser.id;\n            authUserExists = true;\n          }\n        }\n      }\n\n      // Step 2: Create auth user if doesn't exist\n      if (!authUserExists) {\n        console.log('üîë Step 2: Creating new auth user:', ownerEmail);\n        const authResult = await adminCreateUser({\n          email: ownerEmail,\n          password: tempPassword,\n          firstName: ownerFirstName,\n          lastName: ownerLastName,\n          role: ownerRole,\n          jobTitle: 'Owner'\n        });\n        if (!authResult || !authResult.user) {\n          throw new Error('Failed to create auth user: No user returned');\n        }\n        authUserId = authResult.user.id;\n        createdAuthUserId = authUserId;\n        console.log('‚úÖ Auth user created:', authUserId);\n      }\n\n      // Step 3: Create the company\n      console.log('üè¢ Step 3: Creating company...');\n      const {\n        data: company,\n        error: companyError\n      } = await db.from('companies').insert({\n        name: companyName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (companyError) {\n        throw new Error(`Failed to create company: ${companyError.message}`);\n      }\n      createdCompanyId = company.id;\n      console.log('‚úÖ Company created:', company.company_number);\n\n      // Step 4: Create users table record\n      console.log('üë• Step 4: Creating users table record...');\n      const fullName = [ownerFirstName, ownerLastName].filter(Boolean).join(' ').trim() || null;\n\n      // Use RPC to bypass PostgREST schema cache issues with recently added columns\n      const {\n        data: rpcResult,\n        error: userError\n      } = await db.rpc('create_user_record', {\n        p_id: authUserId,\n        p_email: ownerEmail,\n        p_company_id: company.id,\n        p_role: ownerRole,\n        p_full_name: fullName,\n        p_phone: formattedPhone\n      });\n      if (userError) {\n        throw new Error(`Failed to create user record: ${userError.message}`);\n      }\n\n      // RPC returns JSON object, parse it\n      const userRecord = typeof rpcResult === 'string' ? JSON.parse(rpcResult) : rpcResult;\n      console.log('‚úÖ Users table record created:', userRecord.id);\n\n      // Step 4: Create or update profile\n      console.log('üë§ Creating/updating profile for user ID:', authResult.user.id);\n\n      // First check if profile already exists\n      const {\n        data: existingProfile\n      } = await db.from('profiles').select('id').eq('id', userRecord.id).maybeSingle();\n      let profile;\n      if (existingProfile) {\n        console.log('üìù Profile exists, updating...');\n        // Update existing profile\n        const {\n          data: updatedProfile,\n          error: updateError\n        } = await db.from('profiles').update({\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).eq('id', userRecord.id).select().single();\n        if (updateError) {\n          console.error('‚ùå Profile update failed:', updateError);\n          throw new Error(`Failed to update profile: ${updateError.message}`);\n        }\n        profile = updatedProfile;\n      } else {\n        console.log('üÜï Creating new profile...');\n        // Create new profile\n        const {\n          data: newProfile,\n          error: createError\n        } = await db.from('profiles').insert({\n          id: userRecord.id,\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).select().single();\n        if (createError) {\n          console.error('‚ùå Profile creation failed:', createError);\n          throw new Error(`Failed to create profile: ${createError.message}`);\n        }\n        profile = newProfile;\n      }\n      console.log('üîç Profile result:', {\n        profile: [(_profile = profile) === null || _profile === void 0 ? void 0 : _profile.first_name, (_profile2 = profile) === null || _profile2 === void 0 ? void 0 : _profile2.last_name].filter(Boolean).join(' ')\n      });\n      console.log('üéâ Company creation completed successfully!');\n      console.log('‚úÖ VERIFICATION:');\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\n      console.log('  üîê Auth User:', authResult.user.email, '(ID:', authResult.user.id, ')');\n      console.log('  üë• Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\n      console.log('  üë§ Profile:', [profile.first_name, profile.last_name].filter(Boolean).join(' '), '(Role:', profile.role, ')');\n      return {\n        company,\n        authUser: authResult.user,\n        userRecord,\n        profile,\n        success: true,\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('üë• Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (using secure Edge Function)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\n            await adminDeleteUser(profile.id);\n            console.log('‚úÖ Auth user deleted:', profile.email);\n          } catch (error) {\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\n            // Continue with other deletions even if one fails\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('‚úÖ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('‚úÖ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseAdmin","hasAdminBypass","adminCreateUser","adminDeleteUser","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","db","createdCompanyId","createdAuthUserId","_profile","_profile2","console","log","formattedPhone","trim","digitsOnly","replace","length","startsWith","warn","authUserId","authUserExists","data","existingAuthUsers","error","listError","auth","admin","listUsers","existingUser","users","find","u","email","id","authResult","password","firstName","lastName","role","jobTitle","user","Error","company","companyError","from","insert","name","created_at","Date","toISOString","select","single","message","company_number","fullName","filter","Boolean","join","rpcResult","userError","rpc","p_id","p_email","p_company_id","p_role","p_full_name","p_phone","userRecord","JSON","parse","existingProfile","eq","maybeSingle","profile","updatedProfile","updateError","update","first_name","last_name","phone","company_id","newProfile","createError","authUser","success","getAllCompanies","companies","order","ascending","getCompanyDetails","companyId","functions","invoke","body","deleteCompany","profiles","profilesError","profileDeleteError","delete","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\r\n\r\n    let createdCompanyId = null;\r\n    let createdAuthUserId = null;\r\n\r\n    try {\r\n      console.log('üöÄ Starting ATOMIC company creation workflow...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Format phone number to international format if provided\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone;\r\n        } else {\r\n          console.warn('‚ö†Ô∏è Phone number format unclear, skipping:', ownerPhone);\r\n          formattedPhone = null;\r\n        }\r\n        console.log('üì± Phone formatted:', ownerPhone, '‚Üí', formattedPhone);\r\n      }\r\n\r\n      // Step 1: Check if auth user already exists (idempotent check)\r\n      console.log('üîç Step 1: Checking if auth user exists:', ownerEmail);\r\n      let authUserId = null;\r\n      let authUserExists = false;\r\n\r\n      if (hasAdminBypass && supabaseAdmin) {\r\n        const { data: existingAuthUsers, error: listError } = await supabaseAdmin.auth.admin.listUsers();\r\n        if (!listError) {\r\n          const existingUser = existingAuthUsers.users.find(u => u.email === ownerEmail);\r\n          if (existingUser) {\r\n            console.log('‚ö†Ô∏è  Auth user already exists, will reuse:', existingUser.id);\r\n            authUserId = existingUser.id;\r\n            authUserExists = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 2: Create auth user if doesn't exist\r\n      if (!authUserExists) {\r\n        console.log('üîë Step 2: Creating new auth user:', ownerEmail);\r\n        const authResult = await adminCreateUser({\r\n          email: ownerEmail,\r\n          password: tempPassword,\r\n          firstName: ownerFirstName,\r\n          lastName: ownerLastName,\r\n          role: ownerRole,\r\n          jobTitle: 'Owner'\r\n        });\r\n\r\n        if (!authResult || !authResult.user) {\r\n          throw new Error('Failed to create auth user: No user returned');\r\n        }\r\n\r\n        authUserId = authResult.user.id;\r\n        createdAuthUserId = authUserId;\r\n        console.log('‚úÖ Auth user created:', authUserId);\r\n      }\r\n\r\n      // Step 3: Create the company\r\n      console.log('üè¢ Step 3: Creating company...');\r\n      const { data: company, error: companyError } = await db\r\n        .from('companies')\r\n        .insert({\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      createdCompanyId = company.id;\r\n      console.log('‚úÖ Company created:', company.company_number);\r\n\r\n      // Step 4: Create users table record\r\n      console.log('üë• Step 4: Creating users table record...');\r\n      const fullName = [ownerFirstName, ownerLastName].filter(Boolean).join(' ').trim() || null;\r\n\r\n      // Use RPC to bypass PostgREST schema cache issues with recently added columns\r\n      const { data: rpcResult, error: userError } = await db.rpc('create_user_record', {\r\n        p_id: authUserId,\r\n        p_email: ownerEmail,\r\n        p_company_id: company.id,\r\n        p_role: ownerRole,\r\n        p_full_name: fullName,\r\n        p_phone: formattedPhone\r\n      });\r\n\r\n      if (userError) {\r\n        throw new Error(`Failed to create user record: ${userError.message}`);\r\n      }\r\n\r\n      // RPC returns JSON object, parse it\r\n      const userRecord = typeof rpcResult === 'string' ? JSON.parse(rpcResult) : rpcResult;\r\n      console.log('‚úÖ Users table record created:', userRecord.id);\r\n\r\n      // Step 4: Create or update profile\r\n      console.log('üë§ Creating/updating profile for user ID:', authResult.user.id);\r\n\r\n      // First check if profile already exists\r\n      const { data: existingProfile } = await db\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('id', userRecord.id)\r\n        .maybeSingle();\r\n\r\n      let profile;\r\n      if (existingProfile) {\r\n        console.log('üìù Profile exists, updating...');\r\n        // Update existing profile\r\n        const { data: updatedProfile, error: updateError } = await db\r\n          .from('profiles')\r\n          .update({\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .eq('id', userRecord.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          console.error('‚ùå Profile update failed:', updateError);\r\n          throw new Error(`Failed to update profile: ${updateError.message}`);\r\n        }\r\n        profile = updatedProfile;\r\n      } else {\r\n        console.log('üÜï Creating new profile...');\r\n        // Create new profile\r\n        const { data: newProfile, error: createError } = await db\r\n          .from('profiles')\r\n          .insert({\r\n            id: userRecord.id,\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          console.error('‚ùå Profile creation failed:', createError);\r\n          throw new Error(`Failed to create profile: ${createError.message}`);\r\n        }\r\n        profile = newProfile;\r\n      }\r\n\r\n      console.log('üîç Profile result:', { profile: [profile?.first_name, profile?.last_name].filter(Boolean).join(' ') });\r\n\r\n\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ VERIFICATION:');\r\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\r\n      console.log('  üîê Auth User:', authResult.user.email, '(ID:', authResult.user.id, ')');\r\n      console.log('  üë• Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\r\n      console.log('  üë§ Profile:', [profile.first_name, profile.last_name].filter(Boolean).join(' '), '(Role:', profile.role, ')');\r\n\r\n      return {\r\n        company,\r\n        authUser: authResult.user,\r\n        userRecord,\r\n        profile,\r\n        success: true,\r\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (using secure Edge Function)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\r\n            await adminDeleteUser(profile.id);\r\n            console.log('‚úÖ Auth user deleted:', profile.email);\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions even if one fails\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}