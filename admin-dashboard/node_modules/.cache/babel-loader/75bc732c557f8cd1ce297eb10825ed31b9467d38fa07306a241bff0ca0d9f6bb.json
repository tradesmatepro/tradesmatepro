{"ast":null,"code":"import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * SIMPLE: Create company - using ACTUAL database schema\r\n   * CRITICAL: Uses RPC transaction to ensure atomicity (all-or-nothing)\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    if (!hasAdminBypass || !supabaseAdmin) {\n      throw new Error('Admin bypass required - service key not configured');\n    }\n    let createdCompanyId = null;\n    let createdAuthUserId = null;\n    try {\n      console.log('üöÄ Creating company:', companyName);\n      console.log('üìã Owner:', ownerFirstName, ownerLastName, '(' + ownerEmail + ')');\n\n      // Format phone\n      let formattedPhone = null;\n      if (ownerPhone !== null && ownerPhone !== void 0 && ownerPhone.trim()) {\n        const digits = ownerPhone.replace(/\\D/g, '');\n        if (digits.length === 10) formattedPhone = `+1${digits}`;else if (digits.length === 11 && digits.startsWith('1')) formattedPhone = `+${digits}`;else if (ownerPhone.startsWith('+')) formattedPhone = ownerPhone;\n      }\n      console.log('üìû Phone:', formattedPhone || '(none)');\n\n      // 1. Create auth user\n      console.log('1Ô∏è‚É£  Creating auth user...');\n      const {\n        data: authData,\n        error: authError\n      } = await supabaseAdmin.auth.admin.createUser({\n        email: ownerEmail,\n        password: tempPassword,\n        email_confirm: true\n      });\n      if (authError) throw new Error(`Auth failed: ${authError.message}`);\n      createdAuthUserId = authData.user.id;\n      console.log('‚úÖ Auth user created:', createdAuthUserId);\n\n      // 2. Create company\n      console.log('2Ô∏è‚É£  Creating company...');\n      const {\n        data: company,\n        error: companyError\n      } = await supabaseAdmin.from('companies').insert({\n        name: companyName\n      }).select().single();\n      if (companyError) throw new Error(`Company failed: ${companyError.message}`);\n      createdCompanyId = company.id;\n      console.log('‚úÖ Company created:', company.id, 'Number:', company.company_number);\n\n      // 3. Create users record\n      console.log('3Ô∏è‚É£  Creating users record...');\n      const {\n        data: userRecord,\n        error: userError\n      } = await supabaseAdmin.from('users').insert({\n        auth_user_id: authData.user.id,\n        email: ownerEmail,\n        company_id: company.id,\n        role: ownerRole.toLowerCase(),\n        status: 'active',\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        phone: formattedPhone\n      }).select().single();\n      if (userError) throw new Error(`Users failed: ${userError.message}`);\n      console.log('‚úÖ Users record created:', userRecord.id);\n\n      // 4. Create profile\n      console.log('4Ô∏è‚É£  Creating profile...');\n      console.log('   Fields: user_id, first_name, last_name, phone');\n      const {\n        data: profile,\n        error: profileError\n      } = await supabaseAdmin.from('profiles').insert({\n        user_id: userRecord.id,\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        phone: formattedPhone\n      }).select().single();\n      if (profileError) {\n        console.error('   ‚ùå Profile error details:', profileError);\n        throw new Error(`Profile failed: ${profileError.message}`);\n      }\n      console.log('‚úÖ Profile created:', profile.id);\n\n      // 5. Create employee record\n      console.log('5Ô∏è‚É£  Creating employee record...');\n      const {\n        data: employee,\n        error: employeeError\n      } = await supabaseAdmin.from('employees').insert({\n        company_id: company.id,\n        user_id: userRecord.id,\n        employee_number: `EMP-${company.company_number}-001`,\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        job_title: 'Owner',\n        is_schedulable: true\n      }).select().single();\n      if (employeeError) throw new Error(`Employee failed: ${employeeError.message}`);\n      console.log('‚úÖ Employee record created:', employee.id);\n      console.log('üéâ ‚úÖ COMPANY CREATION COMPLETE!');\n      return {\n        company,\n        authUser: {\n          id: authData.user.id,\n          email: ownerEmail\n        },\n        userRecord,\n        profile,\n        employee,\n        success: true,\n        message: `‚úÖ Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå CREATION FAILED:', error.message);\n      console.error('   Attempting rollback...');\n\n      // Rollback - delete in reverse order\n      try {\n        if (createdCompanyId) {\n          console.log('   Deleting employees...');\n          await supabaseAdmin.from('employees').delete().eq('company_id', createdCompanyId);\n          console.log('   Deleting users...');\n          await supabaseAdmin.from('users').delete().eq('company_id', createdCompanyId);\n          console.log('   Deleting company...');\n          await supabaseAdmin.from('companies').delete().eq('id', createdCompanyId);\n        }\n        if (createdAuthUserId) {\n          console.log('   Deleting auth user...');\n          await supabaseAdmin.auth.admin.deleteUser(createdAuthUserId);\n        }\n        console.log('‚úÖ Rollback complete - no orphaned records');\n      } catch (rollbackError) {\n        console.error('‚ö†Ô∏è  Rollback failed:', rollbackError.message);\n        console.error('   ‚ö†Ô∏è  MANUAL CLEANUP REQUIRED IN SUPABASE!');\n      }\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Use admin client to bypass RLS (admin dashboard only)\n      const client = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\n      if (client === supabaseAdmin) {\n        console.log('üîì Using admin client (service key) to bypass RLS');\n      } else {\n        console.log('‚ö†Ô∏è Using regular client - may be restricted by RLS');\n      }\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await client.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('üë• Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (using secure Edge Function)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\n            await adminDeleteUser(profile.id);\n            console.log('‚úÖ Auth user deleted:', profile.email);\n          } catch (error) {\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\n            // Continue with other deletions even if one fails\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('‚úÖ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('‚úÖ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseAdmin","hasAdminBypass","adminCreateUser","adminDeleteUser","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","Error","createdCompanyId","createdAuthUserId","console","log","formattedPhone","trim","digits","replace","length","startsWith","data","authData","error","authError","auth","admin","createUser","email","password","email_confirm","message","user","id","company","companyError","from","insert","name","select","single","company_number","userRecord","userError","auth_user_id","company_id","role","toLowerCase","status","first_name","last_name","phone","profile","profileError","user_id","employee","employeeError","employee_number","job_title","is_schedulable","authUser","success","delete","eq","deleteUser","rollbackError","getAllCompanies","client","companies","order","ascending","getCompanyDetails","companyId","functions","invoke","body","deleteCompany","profiles","profilesError","profileDeleteError","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * SIMPLE: Create company - using ACTUAL database schema\r\n   * CRITICAL: Uses RPC transaction to ensure atomicity (all-or-nothing)\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n\r\n    if (!hasAdminBypass || !supabaseAdmin) {\r\n      throw new Error('Admin bypass required - service key not configured');\r\n    }\r\n\r\n    let createdCompanyId = null;\r\n    let createdAuthUserId = null;\r\n\r\n    try {\r\n      console.log('üöÄ Creating company:', companyName);\r\n      console.log('üìã Owner:', ownerFirstName, ownerLastName, '(' + ownerEmail + ')');\r\n\r\n      // Format phone\r\n      let formattedPhone = null;\r\n      if (ownerPhone?.trim()) {\r\n        const digits = ownerPhone.replace(/\\D/g, '');\r\n        if (digits.length === 10) formattedPhone = `+1${digits}`;\r\n        else if (digits.length === 11 && digits.startsWith('1')) formattedPhone = `+${digits}`;\r\n        else if (ownerPhone.startsWith('+')) formattedPhone = ownerPhone;\r\n      }\r\n      console.log('üìû Phone:', formattedPhone || '(none)');\r\n\r\n      // 1. Create auth user\r\n      console.log('1Ô∏è‚É£  Creating auth user...');\r\n      const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n        email: ownerEmail,\r\n        password: tempPassword,\r\n        email_confirm: true\r\n      });\r\n\r\n      if (authError) throw new Error(`Auth failed: ${authError.message}`);\r\n      createdAuthUserId = authData.user.id;\r\n      console.log('‚úÖ Auth user created:', createdAuthUserId);\r\n\r\n      // 2. Create company\r\n      console.log('2Ô∏è‚É£  Creating company...');\r\n      const { data: company, error: companyError } = await supabaseAdmin\r\n        .from('companies')\r\n        .insert({ name: companyName })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) throw new Error(`Company failed: ${companyError.message}`);\r\n      createdCompanyId = company.id;\r\n      console.log('‚úÖ Company created:', company.id, 'Number:', company.company_number);\r\n\r\n      // 3. Create users record\r\n      console.log('3Ô∏è‚É£  Creating users record...');\r\n      const { data: userRecord, error: userError } = await supabaseAdmin\r\n        .from('users')\r\n        .insert({\r\n          auth_user_id: authData.user.id,\r\n          email: ownerEmail,\r\n          company_id: company.id,\r\n          role: ownerRole.toLowerCase(),\r\n          status: 'active',\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          phone: formattedPhone\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (userError) throw new Error(`Users failed: ${userError.message}`);\r\n      console.log('‚úÖ Users record created:', userRecord.id);\r\n\r\n      // 4. Create profile\r\n      console.log('4Ô∏è‚É£  Creating profile...');\r\n      console.log('   Fields: user_id, first_name, last_name, phone');\r\n      const { data: profile, error: profileError } = await supabaseAdmin\r\n        .from('profiles')\r\n        .insert({\r\n          user_id: userRecord.id,\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          phone: formattedPhone\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (profileError) {\r\n        console.error('   ‚ùå Profile error details:', profileError);\r\n        throw new Error(`Profile failed: ${profileError.message}`);\r\n      }\r\n      console.log('‚úÖ Profile created:', profile.id);\r\n\r\n      // 5. Create employee record\r\n      console.log('5Ô∏è‚É£  Creating employee record...');\r\n      const { data: employee, error: employeeError } = await supabaseAdmin\r\n        .from('employees')\r\n        .insert({\r\n          company_id: company.id,\r\n          user_id: userRecord.id,\r\n          employee_number: `EMP-${company.company_number}-001`,\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          job_title: 'Owner',\r\n          is_schedulable: true\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (employeeError) throw new Error(`Employee failed: ${employeeError.message}`);\r\n      console.log('‚úÖ Employee record created:', employee.id);\r\n\r\n      console.log('üéâ ‚úÖ COMPANY CREATION COMPLETE!');\r\n      return {\r\n        company,\r\n        authUser: { id: authData.user.id, email: ownerEmail },\r\n        userRecord,\r\n        profile,\r\n        employee,\r\n        success: true,\r\n        message: `‚úÖ Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå CREATION FAILED:', error.message);\r\n      console.error('   Attempting rollback...');\r\n\r\n      // Rollback - delete in reverse order\r\n      try {\r\n        if (createdCompanyId) {\r\n          console.log('   Deleting employees...');\r\n          await supabaseAdmin.from('employees').delete().eq('company_id', createdCompanyId);\r\n          console.log('   Deleting users...');\r\n          await supabaseAdmin.from('users').delete().eq('company_id', createdCompanyId);\r\n          console.log('   Deleting company...');\r\n          await supabaseAdmin.from('companies').delete().eq('id', createdCompanyId);\r\n        }\r\n        if (createdAuthUserId) {\r\n          console.log('   Deleting auth user...');\r\n          await supabaseAdmin.auth.admin.deleteUser(createdAuthUserId);\r\n        }\r\n        console.log('‚úÖ Rollback complete - no orphaned records');\r\n      } catch (rollbackError) {\r\n        console.error('‚ö†Ô∏è  Rollback failed:', rollbackError.message);\r\n        console.error('   ‚ö†Ô∏è  MANUAL CLEANUP REQUIRED IN SUPABASE!');\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Use admin client to bypass RLS (admin dashboard only)\r\n      const client = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\r\n\r\n      if (client === supabaseAdmin) {\r\n        console.log('üîì Using admin client (service key) to bypass RLS');\r\n      } else {\r\n        console.log('‚ö†Ô∏è Using regular client - may be restricted by RLS');\r\n      }\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await client\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (using secure Edge Function)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\r\n            await adminDeleteUser(profile.id);\r\n            console.log('‚úÖ Auth user deleted:', profile.email);\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions even if one fails\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}