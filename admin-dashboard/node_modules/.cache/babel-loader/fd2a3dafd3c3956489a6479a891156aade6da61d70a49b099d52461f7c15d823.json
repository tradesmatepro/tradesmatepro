{"ast":null,"code":"import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * SIMPLIFIED Company Creation - Direct SQL via Edge Function\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    try {\n      console.log('üöÄ Creating company via single atomic operation...');\n      console.log('üìù Data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail\n      });\n\n      // Format phone\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone;\n        }\n      }\n\n      // Call Edge Function to do everything in one transaction\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('admin-create-company', {\n        body: {\n          companyName,\n          ownerFirstName,\n          ownerLastName,\n          ownerEmail,\n          ownerPhone: formattedPhone,\n          ownerRole: ownerRole.toLowerCase(),\n          // Ensure lowercase for enum\n          tempPassword\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function error:', error);\n        throw new Error(error.message || 'Failed to create company');\n      }\n      if (!data || !data.success) {\n        throw new Error((data === null || data === void 0 ? void 0 : data.error) || 'Company creation failed');\n      }\n      console.log('‚úÖ Company created successfully:', data.company.company_number);\n      return {\n        ...data,\n        message: `‚úÖ Complete! Company: ${data.company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * LEGACY/FALLBACK: Direct database creation (for local dev only)\r\n   */\n  static async createCompanyWithOwnerDirect(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\n    let createdCompanyId = null;\n    let createdAuthUserId = null;\n    try {\n      var _profile, _profile2;\n      console.log('üöÄ DIRECT DB: Creating company...');\n\n      // Format phone\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone;\n        }\n      }\n\n      // Check if auth user exists\n      let authUserId = null;\n      let authUserExists = false;\n      if (hasAdminBypass && supabaseAdmin) {\n        const {\n          data: existingAuthUsers\n        } = await supabaseAdmin.auth.admin.listUsers();\n        const existingUser = existingAuthUsers === null || existingAuthUsers === void 0 ? void 0 : existingAuthUsers.users.find(u => u.email === ownerEmail);\n        if (existingUser) {\n          authUserId = existingUser.id;\n          authUserExists = true;\n          console.log('‚ö†Ô∏è  Reusing existing auth user:', authUserId);\n        }\n      }\n\n      // Create auth user if needed\n      if (!authUserExists) {\n        const authResult = await adminCreateUser({\n          email: ownerEmail,\n          password: tempPassword,\n          firstName: ownerFirstName,\n          lastName: ownerLastName,\n          role: ownerRole,\n          jobTitle: 'Owner'\n        });\n        if (!(authResult !== null && authResult !== void 0 && authResult.user)) {\n          throw new Error('Failed to create auth user');\n        }\n        authUserId = authResult.user.id;\n        createdAuthUserId = authUserId;\n        console.log('‚úÖ Auth user created:', authUserId);\n      }\n\n      // Create company\n      const {\n        data: company,\n        error: companyError\n      } = await db.from('companies').insert({\n        name: companyName\n      }).select().single();\n      if (companyError) throw new Error(`Company insert failed: ${companyError.message}`);\n      createdCompanyId = company.id;\n      console.log('‚úÖ Company created:', company.company_number);\n\n      // Create users record - DIRECT INSERT with proper enum casting\n      const {\n        data: userRecord,\n        error: userError\n      } = await db.from('users').insert({\n        id: authUserId,\n        email: ownerEmail,\n        company_id: company.id,\n        role: ownerRole.toLowerCase(),\n        // Must be lowercase for enum\n        status: 'active',\n        // Must be lowercase for enum\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        phone: formattedPhone\n      }).select().single();\n      if (userError) throw new Error(`Users insert failed: ${userError.message}`);\n      console.log('‚úÖ Users record created:', userRecord.id);\n\n      // Step 5: Create or update profile\n      console.log('üë§ Step 5: Creating/updating profile for user ID:', authUserId);\n\n      // First check if profile already exists\n      const {\n        data: existingProfile\n      } = await db.from('profiles').select('id').eq('id', userRecord.id).maybeSingle();\n      let profile;\n      if (existingProfile) {\n        console.log('üìù Profile exists, updating...');\n        // Update existing profile\n        const {\n          data: updatedProfile,\n          error: updateError\n        } = await db.from('profiles').update({\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).eq('id', userRecord.id).select().single();\n        if (updateError) {\n          throw new Error(`Failed to update profile: ${updateError.message}`);\n        }\n        profile = updatedProfile;\n      } else {\n        console.log('üÜï Creating new profile...');\n        // Create new profile\n        const {\n          data: newProfile,\n          error: createError\n        } = await db.from('profiles').insert({\n          id: userRecord.id,\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).select().single();\n        if (createError) {\n          throw new Error(`Failed to create profile: ${createError.message}`);\n        }\n        profile = newProfile;\n      }\n      console.log('‚úÖ Profile created/updated:', [(_profile = profile) === null || _profile === void 0 ? void 0 : _profile.first_name, (_profile2 = profile) === null || _profile2 === void 0 ? void 0 : _profile2.last_name].filter(Boolean).join(' '));\n      console.log('üéâ Company creation completed successfully!');\n      console.log('‚úÖ VERIFICATION:');\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\n      console.log('  üîê Auth User:', ownerEmail, '(ID:', authUserId, ')');\n      console.log('  üë• Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\n      console.log('  üë§ Profile:', [profile.first_name, profile.last_name].filter(Boolean).join(' '), '(Role:', profile.role, ')');\n      return {\n        company,\n        authUser: {\n          id: authUserId,\n          email: ownerEmail\n        },\n        userRecord,\n        profile,\n        success: true,\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n\n      // Rollback: Clean up partially created data\n      if (createdCompanyId && hasAdminBypass && supabaseAdmin) {\n        console.log('üîÑ Rolling back: Deleting company', createdCompanyId);\n        await supabaseAdmin.from('companies').delete().eq('id', createdCompanyId);\n      }\n      if (createdAuthUserId && hasAdminBypass && supabaseAdmin) {\n        console.log('üîÑ Rolling back: Deleting auth user', createdAuthUserId);\n        await supabaseAdmin.auth.admin.deleteUser(createdAuthUserId);\n      }\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('üë• Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (using secure Edge Function)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\n            await adminDeleteUser(profile.id);\n            console.log('‚úÖ Auth user deleted:', profile.email);\n          } catch (error) {\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\n            // Continue with other deletions even if one fails\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('‚úÖ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('‚úÖ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseAdmin","hasAdminBypass","adminCreateUser","adminDeleteUser","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","console","log","formattedPhone","trim","digitsOnly","replace","length","startsWith","data","error","functions","invoke","body","toLowerCase","Error","message","success","company","company_number","name","createCompanyWithOwnerDirect","db","createdCompanyId","createdAuthUserId","_profile","_profile2","authUserId","authUserExists","existingAuthUsers","auth","admin","listUsers","existingUser","users","find","u","email","id","authResult","password","firstName","lastName","role","jobTitle","user","companyError","from","insert","select","single","userRecord","userError","company_id","status","first_name","last_name","phone","existingProfile","eq","maybeSingle","profile","updatedProfile","updateError","update","newProfile","createError","filter","Boolean","join","authUser","delete","deleteUser","getAllCompanies","companies","order","ascending","getCompanyDetails","companyId","deleteCompany","profiles","profilesError","profileDeleteError","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * SIMPLIFIED Company Creation - Direct SQL via Edge Function\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Creating company via single atomic operation...');\r\n      console.log('üìù Data:', { companyName, ownerFirstName, ownerLastName, ownerEmail });\r\n\r\n      // Format phone\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone;\r\n        }\r\n      }\r\n\r\n      // Call Edge Function to do everything in one transaction\r\n      const { data, error } = await supabase.functions.invoke('admin-create-company', {\r\n        body: {\r\n          companyName,\r\n          ownerFirstName,\r\n          ownerLastName,\r\n          ownerEmail,\r\n          ownerPhone: formattedPhone,\r\n          ownerRole: ownerRole.toLowerCase(), // Ensure lowercase for enum\r\n          tempPassword\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function error:', error);\r\n        throw new Error(error.message || 'Failed to create company');\r\n      }\r\n\r\n      if (!data || !data.success) {\r\n        throw new Error(data?.error || 'Company creation failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company created successfully:', data.company.company_number);\r\n      return {\r\n        ...data,\r\n        message: `‚úÖ Complete! Company: ${data.company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * LEGACY/FALLBACK: Direct database creation (for local dev only)\r\n   */\r\n  static async createCompanyWithOwnerDirect(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\r\n\r\n    let createdCompanyId = null;\r\n    let createdAuthUserId = null;\r\n\r\n    try {\r\n      console.log('üöÄ DIRECT DB: Creating company...');\r\n\r\n      // Format phone\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone;\r\n        }\r\n      }\r\n\r\n      // Check if auth user exists\r\n      let authUserId = null;\r\n      let authUserExists = false;\r\n\r\n      if (hasAdminBypass && supabaseAdmin) {\r\n        const { data: existingAuthUsers } = await supabaseAdmin.auth.admin.listUsers();\r\n        const existingUser = existingAuthUsers?.users.find(u => u.email === ownerEmail);\r\n        if (existingUser) {\r\n          authUserId = existingUser.id;\r\n          authUserExists = true;\r\n          console.log('‚ö†Ô∏è  Reusing existing auth user:', authUserId);\r\n        }\r\n      }\r\n\r\n      // Create auth user if needed\r\n      if (!authUserExists) {\r\n        const authResult = await adminCreateUser({\r\n          email: ownerEmail,\r\n          password: tempPassword,\r\n          firstName: ownerFirstName,\r\n          lastName: ownerLastName,\r\n          role: ownerRole,\r\n          jobTitle: 'Owner'\r\n        });\r\n\r\n        if (!authResult?.user) {\r\n          throw new Error('Failed to create auth user');\r\n        }\r\n\r\n        authUserId = authResult.user.id;\r\n        createdAuthUserId = authUserId;\r\n        console.log('‚úÖ Auth user created:', authUserId);\r\n      }\r\n\r\n      // Create company\r\n      const { data: company, error: companyError } = await db\r\n        .from('companies')\r\n        .insert({ name: companyName })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) throw new Error(`Company insert failed: ${companyError.message}`);\r\n      createdCompanyId = company.id;\r\n      console.log('‚úÖ Company created:', company.company_number);\r\n\r\n      // Create users record - DIRECT INSERT with proper enum casting\r\n      const { data: userRecord, error: userError } = await db\r\n        .from('users')\r\n        .insert({\r\n          id: authUserId,\r\n          email: ownerEmail,\r\n          company_id: company.id,\r\n          role: ownerRole.toLowerCase(), // Must be lowercase for enum\r\n          status: 'active', // Must be lowercase for enum\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          phone: formattedPhone\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (userError) throw new Error(`Users insert failed: ${userError.message}`);\r\n      console.log('‚úÖ Users record created:', userRecord.id);\r\n\r\n      // Step 5: Create or update profile\r\n      console.log('üë§ Step 5: Creating/updating profile for user ID:', authUserId);\r\n\r\n      // First check if profile already exists\r\n      const { data: existingProfile } = await db\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('id', userRecord.id)\r\n        .maybeSingle();\r\n\r\n      let profile;\r\n      if (existingProfile) {\r\n        console.log('üìù Profile exists, updating...');\r\n        // Update existing profile\r\n        const { data: updatedProfile, error: updateError } = await db\r\n          .from('profiles')\r\n          .update({\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .eq('id', userRecord.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          throw new Error(`Failed to update profile: ${updateError.message}`);\r\n        }\r\n        profile = updatedProfile;\r\n      } else {\r\n        console.log('üÜï Creating new profile...');\r\n        // Create new profile\r\n        const { data: newProfile, error: createError } = await db\r\n          .from('profiles')\r\n          .insert({\r\n            id: userRecord.id,\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          throw new Error(`Failed to create profile: ${createError.message}`);\r\n        }\r\n        profile = newProfile;\r\n      }\r\n\r\n      console.log('‚úÖ Profile created/updated:', [profile?.first_name, profile?.last_name].filter(Boolean).join(' '));\r\n\r\n\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ VERIFICATION:');\r\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\r\n      console.log('  üîê Auth User:', ownerEmail, '(ID:', authUserId, ')');\r\n      console.log('  üë• Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\r\n      console.log('  üë§ Profile:', [profile.first_name, profile.last_name].filter(Boolean).join(' '), '(Role:', profile.role, ')');\r\n\r\n      return {\r\n        company,\r\n        authUser: { id: authUserId, email: ownerEmail },\r\n        userRecord,\r\n        profile,\r\n        success: true,\r\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n\r\n      // Rollback: Clean up partially created data\r\n      if (createdCompanyId && hasAdminBypass && supabaseAdmin) {\r\n        console.log('üîÑ Rolling back: Deleting company', createdCompanyId);\r\n        await supabaseAdmin.from('companies').delete().eq('id', createdCompanyId);\r\n      }\r\n\r\n      if (createdAuthUserId && hasAdminBypass && supabaseAdmin) {\r\n        console.log('üîÑ Rolling back: Deleting auth user', createdAuthUserId);\r\n        await supabaseAdmin.auth.admin.deleteUser(createdAuthUserId);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (using secure Edge Function)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\r\n            await adminDeleteUser(profile.id);\r\n            console.log('‚úÖ Auth user deleted:', profile.email);\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions even if one fails\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}