{"ast":null,"code":"import { supabase, adminCreateUser, adminDeleteUser, createCompanyWithOwner } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\n    try {\n      var _authResult$user, _profile;\n      console.log('🚀 Starting company creation - DIRECT DATABASE...');\n      console.log('📝 Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Format phone number to international format if provided\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        // Remove all non-digits\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n\n        // Add +1 for US numbers if not already international format\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone; // Already formatted\n        } else {\n          console.warn('⚠️ Phone number format unclear, skipping:', ownerPhone);\n          formattedPhone = null; // Skip invalid phone numbers\n        }\n        console.log('📱 Phone formatted:', ownerPhone, '→', formattedPhone);\n      }\n\n      // Step 1: Create the company (company_number will be auto-generated by database)\n      const {\n        data: company,\n        error: companyError\n      } = await supabase.from('companies').insert({\n        name: companyName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (companyError) {\n        console.error('❌ Company creation failed:', companyError);\n        throw new Error(`Failed to create company: ${companyError.message}`);\n      }\n      console.log('✅ Company created:', company);\n      console.log('🔢 Auto-generated company number:', company.company_number);\n\n      // Step 2: Create auth user using SECURE EDGE FUNCTION\n      console.log('🔑 Using Edge Function for secure user creation...');\n      console.log('📧 Creating auth user for:', ownerEmail);\n      const authResult = await adminCreateUser({\n        email: ownerEmail,\n        password: tempPassword,\n        firstName: ownerFirstName,\n        lastName: ownerLastName,\n        role: ownerRole,\n        jobTitle: 'Owner'\n      });\n      console.log('🔍 Auth user creation result:', {\n        user: authResult === null || authResult === void 0 ? void 0 : (_authResult$user = authResult.user) === null || _authResult$user === void 0 ? void 0 : _authResult$user.email\n      });\n      if (!authResult || !authResult.user) {\n        console.error('❌ Auth user creation failed: No user returned');\n        throw new Error('Failed to create user: No user returned from Edge Function');\n      }\n      console.log('✅ Auth user created:', authResult.user.email);\n\n      // Step 3: Create users table record\n      console.log('👥 Creating users table record...');\n      const {\n        data: userRecord,\n        error: userError\n      } = await supabase.from('users').insert({\n        auth_user_id: authResult.user.id,\n        company_id: company.id,\n        role: ownerRole\n      }).select().single();\n      if (userError) {\n        console.error('❌ Users table record creation failed:', userError);\n        throw new Error(`Failed to create user record: ${userError.message}`);\n      }\n      console.log('✅ Users table record created:', userRecord.id);\n\n      // Step 4: Create or update profile\n      console.log('👤 Creating/updating profile for user ID:', authResult.user.id);\n\n      // First check if profile already exists\n      const {\n        data: existingProfile\n      } = await supabase.from('profiles').select('id').eq('user_id', authResult.user.id).single();\n      let profile;\n      if (existingProfile) {\n        console.log('📝 Profile exists, updating...');\n        // Update existing profile\n        const {\n          data: updatedProfile,\n          error: updateError\n        } = await supabase.from('profiles').update({\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          email: ownerEmail,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).eq('user_id', authResult.user.id).select().single();\n        if (updateError) {\n          console.error('❌ Profile update failed:', updateError);\n          throw new Error(`Failed to update profile: ${updateError.message}`);\n        }\n        profile = updatedProfile;\n      } else {\n        console.log('🆕 Creating new profile...');\n        // Create new profile\n        const {\n          data: newProfile,\n          error: createError\n        } = await supabase.from('profiles').insert({\n          user_id: authResult.user.id,\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          email: ownerEmail,\n          phone: formattedPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).select().single();\n        if (createError) {\n          console.error('❌ Profile creation failed:', createError);\n          throw new Error(`Failed to create profile: ${createError.message}`);\n        }\n        profile = newProfile;\n      }\n      console.log('🔍 Profile result:', {\n        profile: (_profile = profile) === null || _profile === void 0 ? void 0 : _profile.email\n      });\n      console.log('🎉 Company creation completed successfully!');\n      console.log('✅ VERIFICATION:');\n      console.log('  📊 Company:', company.name, '(ID:', company.id, ')');\n      console.log('  🔐 Auth User:', authResult.user.email, '(ID:', authResult.user.id, ')');\n      console.log('  👥 Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\n      console.log('  👤 Profile:', profile.email, '(Role:', profile.role, ')');\n      return {\n        company,\n        authUser: authResult.user,\n        userRecord,\n        profile,\n        success: true,\n        message: `✅ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('❌ Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('🏢 Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('❌ Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('✅ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('❌ Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('🏢 Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('❌ Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('❌ Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('✅ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('❌ Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('🗑️ Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('❌ Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('👥 Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (using secure Edge Function)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('🔐 Deleting auth user via Edge Function:', profile.email);\n            await adminDeleteUser(profile.id);\n            console.log('✅ Auth user deleted:', profile.email);\n          } catch (error) {\n            console.error('❌ Error deleting auth user:', profile.email, error);\n            // Continue with other deletions even if one fails\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('❌ Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('✅ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('❌ Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('✅ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('❌ Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","adminCreateUser","adminDeleteUser","createCompanyWithOwner","CompanyService","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","db","hasAdminBypass","supabaseAdmin","_authResult$user","_profile","console","log","formattedPhone","trim","digitsOnly","replace","length","startsWith","warn","data","company","error","companyError","from","insert","name","created_at","Date","toISOString","select","single","Error","message","company_number","authResult","email","password","firstName","lastName","role","jobTitle","user","userRecord","userError","auth_user_id","id","company_id","existingProfile","eq","profile","updatedProfile","updateError","update","first_name","last_name","phone","newProfile","createError","user_id","authUser","success","getAllCompanies","companies","order","ascending","getCompanyDetails","companyId","functions","invoke","body","deleteCompany","profiles","profilesError","profileDeleteError","delete","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, adminCreateUser, adminDeleteUser, createCompanyWithOwner } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\r\n\r\n\r\n    try {\r\n      console.log('🚀 Starting company creation - DIRECT DATABASE...');\r\n      console.log('📝 Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Format phone number to international format if provided\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        // Remove all non-digits\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n\r\n        // Add +1 for US numbers if not already international format\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone; // Already formatted\r\n        } else {\r\n          console.warn('⚠️ Phone number format unclear, skipping:', ownerPhone);\r\n          formattedPhone = null; // Skip invalid phone numbers\r\n        }\r\n        console.log('📱 Phone formatted:', ownerPhone, '→', formattedPhone);\r\n      }\r\n\r\n      // Step 1: Create the company (company_number will be auto-generated by database)\r\n      const { data: company, error: companyError } = await supabase\r\n        .from('companies')\r\n        .insert({\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        console.error('❌ Company creation failed:', companyError);\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      console.log('✅ Company created:', company);\r\n      console.log('🔢 Auto-generated company number:', company.company_number);\r\n\r\n      // Step 2: Create auth user using SECURE EDGE FUNCTION\r\n      console.log('🔑 Using Edge Function for secure user creation...');\r\n      console.log('📧 Creating auth user for:', ownerEmail);\r\n\r\n      const authResult = await adminCreateUser({\r\n        email: ownerEmail,\r\n        password: tempPassword,\r\n        firstName: ownerFirstName,\r\n        lastName: ownerLastName,\r\n        role: ownerRole,\r\n        jobTitle: 'Owner'\r\n      });\r\n\r\n      console.log('🔍 Auth user creation result:', { user: authResult?.user?.email });\r\n\r\n      if (!authResult || !authResult.user) {\r\n        console.error('❌ Auth user creation failed: No user returned');\r\n        throw new Error('Failed to create user: No user returned from Edge Function');\r\n      }\r\n\r\n      console.log('✅ Auth user created:', authResult.user.email);\r\n\r\n      // Step 3: Create users table record\r\n      console.log('👥 Creating users table record...');\r\n      const { data: userRecord, error: userError } = await supabase\r\n        .from('users')\r\n        .insert({\r\n          auth_user_id: authResult.user.id,\r\n          company_id: company.id,\r\n          role: ownerRole\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (userError) {\r\n        console.error('❌ Users table record creation failed:', userError);\r\n        throw new Error(`Failed to create user record: ${userError.message}`);\r\n      }\r\n\r\n      console.log('✅ Users table record created:', userRecord.id);\r\n\r\n      // Step 4: Create or update profile\r\n      console.log('👤 Creating/updating profile for user ID:', authResult.user.id);\r\n\r\n      // First check if profile already exists\r\n      const { data: existingProfile } = await supabase\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('user_id', authResult.user.id)\r\n        .single();\r\n\r\n      let profile;\r\n      if (existingProfile) {\r\n        console.log('📝 Profile exists, updating...');\r\n        // Update existing profile\r\n        const { data: updatedProfile, error: updateError } = await supabase\r\n          .from('profiles')\r\n          .update({\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .eq('user_id', authResult.user.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          console.error('❌ Profile update failed:', updateError);\r\n          throw new Error(`Failed to update profile: ${updateError.message}`);\r\n        }\r\n        profile = updatedProfile;\r\n      } else {\r\n        console.log('🆕 Creating new profile...');\r\n        // Create new profile\r\n        const { data: newProfile, error: createError } = await supabase\r\n          .from('profiles')\r\n          .insert({\r\n            user_id: authResult.user.id,\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          console.error('❌ Profile creation failed:', createError);\r\n          throw new Error(`Failed to create profile: ${createError.message}`);\r\n        }\r\n        profile = newProfile;\r\n      }\r\n\r\n      console.log('🔍 Profile result:', { profile: profile?.email });\r\n\r\n\r\n\r\n      console.log('🎉 Company creation completed successfully!');\r\n      console.log('✅ VERIFICATION:');\r\n      console.log('  📊 Company:', company.name, '(ID:', company.id, ')');\r\n      console.log('  🔐 Auth User:', authResult.user.email, '(ID:', authResult.user.id, ')');\r\n      console.log('  👥 Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\r\n      console.log('  👤 Profile:', profile.email, '(Role:', profile.role, ')');\r\n\r\n      return {\r\n        company,\r\n        authUser: authResult.user,\r\n        userRecord,\r\n        profile,\r\n        success: true,\r\n        message: `✅ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('🏢 Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('❌ Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('✅ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('🏢 Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('❌ Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('❌ Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('✅ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('🗑️ Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('❌ Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('👥 Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (using secure Edge Function)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('🔐 Deleting auth user via Edge Function:', profile.email);\r\n            await adminDeleteUser(profile.id);\r\n            console.log('✅ Auth user deleted:', profile.email);\r\n          } catch (error) {\r\n            console.error('❌ Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions even if one fails\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('❌ Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('✅ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('❌ Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('✅ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,eAAe,EAAEC,eAAe,EAAEC,sBAAsB,QAAQ,mBAAmB;;AAEtG;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,CAAC;EAE1B;AACF;AACA;EACE,aAAaD,sBAAsBA,CAACE,QAAQ,EAAE;IAC5C,MAAM;MAAEC,WAAW;MAAEC,cAAc;MAAEC,aAAa;MAAEC,UAAU;MAAEC,UAAU;MAAEC,SAAS;MAAEC;IAAa,CAAC,GAAGP,QAAQ;IAChH,MAAMQ,EAAE,GAAGC,cAAc,IAAIC,aAAa,GAAGA,aAAa,GAAGf,QAAQ;IAGrE,IAAI;MAAA,IAAAgB,gBAAA,EAAAC,QAAA;MACFC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAChED,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;QAAEb,WAAW;QAAEC,cAAc;QAAEC,aAAa;QAAEC,UAAU;QAAEC;MAAW,CAAC,CAAC;;MAEpG;MACA,IAAIU,cAAc,GAAG,IAAI;MACzB,IAAIV,UAAU,IAAIA,UAAU,CAACW,IAAI,CAAC,CAAC,EAAE;QACnC;QACA,MAAMC,UAAU,GAAGZ,UAAU,CAACa,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;QAEhD;QACA,IAAID,UAAU,CAACE,MAAM,KAAK,EAAE,EAAE;UAC5BJ,cAAc,GAAG,KAAKE,UAAU,EAAE;QACpC,CAAC,MAAM,IAAIA,UAAU,CAACE,MAAM,KAAK,EAAE,IAAIF,UAAU,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;UACjEL,cAAc,GAAG,IAAIE,UAAU,EAAE;QACnC,CAAC,MAAM,IAAIZ,UAAU,CAACe,UAAU,CAAC,GAAG,CAAC,EAAE;UACrCL,cAAc,GAAGV,UAAU,CAAC,CAAC;QAC/B,CAAC,MAAM;UACLQ,OAAO,CAACQ,IAAI,CAAC,2CAA2C,EAAEhB,UAAU,CAAC;UACrEU,cAAc,GAAG,IAAI,CAAC,CAAC;QACzB;QACAF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAET,UAAU,EAAE,GAAG,EAAEU,cAAc,CAAC;MACrE;;MAEA;MACA,MAAM;QAAEO,IAAI,EAAEC,OAAO;QAAEC,KAAK,EAAEC;MAAa,CAAC,GAAG,MAAM9B,QAAQ,CAC1D+B,IAAI,CAAC,WAAW,CAAC,CACjBC,MAAM,CAAC;QACNC,IAAI,EAAE3B,WAAW;QACjB4B,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CAAC,CACDC,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIR,YAAY,EAAE;QAChBZ,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAEC,YAAY,CAAC;QACzD,MAAM,IAAIS,KAAK,CAAC,6BAA6BT,YAAY,CAACU,OAAO,EAAE,CAAC;MACtE;MAEAtB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAES,OAAO,CAAC;MAC1CV,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAES,OAAO,CAACa,cAAc,CAAC;;MAExE;MACAvB,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjED,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEV,UAAU,CAAC;MAErD,MAAMiC,UAAU,GAAG,MAAMzC,eAAe,CAAC;QACvC0C,KAAK,EAAElC,UAAU;QACjBmC,QAAQ,EAAEhC,YAAY;QACtBiC,SAAS,EAAEtC,cAAc;QACzBuC,QAAQ,EAAEtC,aAAa;QACvBuC,IAAI,EAAEpC,SAAS;QACfqC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF9B,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE;QAAE8B,IAAI,EAAEP,UAAU,aAAVA,UAAU,wBAAA1B,gBAAA,GAAV0B,UAAU,CAAEO,IAAI,cAAAjC,gBAAA,uBAAhBA,gBAAA,CAAkB2B;MAAM,CAAC,CAAC;MAE/E,IAAI,CAACD,UAAU,IAAI,CAACA,UAAU,CAACO,IAAI,EAAE;QACnC/B,OAAO,CAACW,KAAK,CAAC,+CAA+C,CAAC;QAC9D,MAAM,IAAIU,KAAK,CAAC,4DAA4D,CAAC;MAC/E;MAEArB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEuB,UAAU,CAACO,IAAI,CAACN,KAAK,CAAC;;MAE1D;MACAzB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAM;QAAEQ,IAAI,EAAEuB,UAAU;QAAErB,KAAK,EAAEsB;MAAU,CAAC,GAAG,MAAMnD,QAAQ,CAC1D+B,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC;QACNoB,YAAY,EAAEV,UAAU,CAACO,IAAI,CAACI,EAAE;QAChCC,UAAU,EAAE1B,OAAO,CAACyB,EAAE;QACtBN,IAAI,EAAEpC;MACR,CAAC,CAAC,CACD0B,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;MAEX,IAAIa,SAAS,EAAE;QACbjC,OAAO,CAACW,KAAK,CAAC,uCAAuC,EAAEsB,SAAS,CAAC;QACjE,MAAM,IAAIZ,KAAK,CAAC,iCAAiCY,SAAS,CAACX,OAAO,EAAE,CAAC;MACvE;MAEAtB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE+B,UAAU,CAACG,EAAE,CAAC;;MAE3D;MACAnC,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEuB,UAAU,CAACO,IAAI,CAACI,EAAE,CAAC;;MAE5E;MACA,MAAM;QAAE1B,IAAI,EAAE4B;MAAgB,CAAC,GAAG,MAAMvD,QAAQ,CAC7C+B,IAAI,CAAC,UAAU,CAAC,CAChBM,MAAM,CAAC,IAAI,CAAC,CACZmB,EAAE,CAAC,SAAS,EAAEd,UAAU,CAACO,IAAI,CAACI,EAAE,CAAC,CACjCf,MAAM,CAAC,CAAC;MAEX,IAAImB,OAAO;MACX,IAAIF,eAAe,EAAE;QACnBrC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C;QACA,MAAM;UAAEQ,IAAI,EAAE+B,cAAc;UAAE7B,KAAK,EAAE8B;QAAY,CAAC,GAAG,MAAM3D,QAAQ,CAChE+B,IAAI,CAAC,UAAU,CAAC,CAChB6B,MAAM,CAAC;UACNC,UAAU,EAAEtD,cAAc;UAC1BuD,SAAS,EAAEtD,aAAa;UACxBmC,KAAK,EAAElC,UAAU;UACjBsD,KAAK,EAAE3C,cAAc;UACrB2B,IAAI,EAAEpC,SAAS;UACf2C,UAAU,EAAE1B,OAAO,CAACyB;QACtB,CAAC,CAAC,CACDG,EAAE,CAAC,SAAS,EAAEd,UAAU,CAACO,IAAI,CAACI,EAAE,CAAC,CACjChB,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;QAEX,IAAIqB,WAAW,EAAE;UACfzC,OAAO,CAACW,KAAK,CAAC,0BAA0B,EAAE8B,WAAW,CAAC;UACtD,MAAM,IAAIpB,KAAK,CAAC,6BAA6BoB,WAAW,CAACnB,OAAO,EAAE,CAAC;QACrE;QACAiB,OAAO,GAAGC,cAAc;MAC1B,CAAC,MAAM;QACLxC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC;QACA,MAAM;UAAEQ,IAAI,EAAEqC,UAAU;UAAEnC,KAAK,EAAEoC;QAAY,CAAC,GAAG,MAAMjE,QAAQ,CAC5D+B,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC;UACNkC,OAAO,EAAExB,UAAU,CAACO,IAAI,CAACI,EAAE;UAC3BQ,UAAU,EAAEtD,cAAc;UAC1BuD,SAAS,EAAEtD,aAAa;UACxBmC,KAAK,EAAElC,UAAU;UACjBsD,KAAK,EAAE3C,cAAc;UACrB2B,IAAI,EAAEpC,SAAS;UACf2C,UAAU,EAAE1B,OAAO,CAACyB;QACtB,CAAC,CAAC,CACDhB,MAAM,CAAC,CAAC,CACRC,MAAM,CAAC,CAAC;QAEX,IAAI2B,WAAW,EAAE;UACf/C,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAEoC,WAAW,CAAC;UACxD,MAAM,IAAI1B,KAAK,CAAC,6BAA6B0B,WAAW,CAACzB,OAAO,EAAE,CAAC;QACrE;QACAiB,OAAO,GAAGO,UAAU;MACtB;MAEA9C,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;QAAEsC,OAAO,GAAAxC,QAAA,GAAEwC,OAAO,cAAAxC,QAAA,uBAAPA,QAAA,CAAS0B;MAAM,CAAC,CAAC;MAI9DzB,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1DD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAES,OAAO,CAACK,IAAI,EAAE,MAAM,EAAEL,OAAO,CAACyB,EAAE,EAAE,GAAG,CAAC;MACnEnC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEuB,UAAU,CAACO,IAAI,CAACN,KAAK,EAAE,MAAM,EAAED,UAAU,CAACO,IAAI,CAACI,EAAE,EAAE,GAAG,CAAC;MACtFnC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE+B,UAAU,CAACG,EAAE,EAAE,QAAQ,EAAEH,UAAU,CAACH,IAAI,EAAE,GAAG,CAAC;MAChF7B,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEsC,OAAO,CAACd,KAAK,EAAE,QAAQ,EAAEc,OAAO,CAACV,IAAI,EAAE,GAAG,CAAC;MAExE,OAAO;QACLnB,OAAO;QACPuC,QAAQ,EAAEzB,UAAU,CAACO,IAAI;QACzBC,UAAU;QACVO,OAAO;QACPW,OAAO,EAAE,IAAI;QACb5B,OAAO,EAAE,wBAAwBZ,OAAO,CAACK,IAAI,aAAaxB,UAAU,gBAAgBG,YAAY;MAClG,CAAC;IAEH,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACE,aAAawC,eAAeA,CAAA,EAAG;IAC7B,IAAI;MACFnD,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;MAE9D;MACA,MAAM;QAAEQ,IAAI,EAAE2C,SAAS;QAAEzC;MAAM,CAAC,GAAG,MAAM7B,QAAQ,CAC9C+B,IAAI,CAAC,WAAW,CAAC,CACjBM,MAAM,CAAC;AAChB;AACA;AACA;AACA;AACA,SAAS,CAAC,CACDkC,KAAK,CAAC,YAAY,EAAE;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;MAE5C,IAAI3C,KAAK,EAAE;QACTX,OAAO,CAACW,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,MAAM,IAAIU,KAAK,CAAC,8BAA8BV,KAAK,CAACW,OAAO,EAAE,CAAC;MAChE;MAEAtB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE,CAAAmD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE9C,MAAM,KAAI,CAAC,CAAC;MACxE,OAAO8C,SAAS,IAAI,EAAE;IAExB,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACE,aAAa4C,iBAAiBA,CAACC,SAAS,EAAE;IACxC,IAAI;MACFxD,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEuD,SAAS,CAAC;;MAE5E;MACA,MAAM;QAAE/C,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAM7B,QAAQ,CAAC2E,SAAS,CAACC,MAAM,CAAC,qBAAqB,EAAE;QAC7EC,IAAI,EAAE;UAAEH;QAAU;MACpB,CAAC,CAAC;MAEF,IAAI7C,KAAK,EAAE;QACTX,OAAO,CAACW,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,MAAM,IAAIU,KAAK,CAAC,oCAAoCV,KAAK,CAACW,OAAO,EAAE,CAAC;MACtE;MAEA,IAAI,CAACb,IAAI,CAACyC,OAAO,EAAE;QACjBlD,OAAO,CAACW,KAAK,CAAC,iCAAiC,EAAEF,IAAI,CAACE,KAAK,CAAC;QAC5D,MAAM,IAAIU,KAAK,CAACZ,IAAI,CAACE,KAAK,IAAI,8BAA8B,CAAC;MAC/D;MAEAX,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;MACrD,OAAOQ,IAAI,CAACC,OAAO;IAErB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACE,aAAaiD,aAAaA,CAACJ,SAAS,EAAE;IACpC,IAAI;MACFxD,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEuD,SAAS,CAAC;;MAE/D;MACA,MAAM;QAAE/C,IAAI,EAAEoD,QAAQ;QAAElD,KAAK,EAAEmD;MAAc,CAAC,GAAG,MAAMhF,QAAQ,CAC5D+B,IAAI,CAAC,UAAU,CAAC,CAChBM,MAAM,CAAC,WAAW,CAAC,CACnBmB,EAAE,CAAC,YAAY,EAAEkB,SAAS,CAAC;MAE9B,IAAIM,aAAa,EAAE;QACjB9D,OAAO,CAACW,KAAK,CAAC,oCAAoC,EAAEmD,aAAa,CAAC;QAClE,MAAM,IAAIzC,KAAK,CAAC,qCAAqCyC,aAAa,CAACxC,OAAO,EAAE,CAAC;MAC/E;MAEAtB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE,CAAA4D,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEvD,MAAM,KAAI,CAAC,CAAC;;MAElE;MACA,IAAIuD,QAAQ,IAAIA,QAAQ,CAACvD,MAAM,GAAG,CAAC,EAAE;QACnC,KAAK,MAAMiC,OAAO,IAAIsB,QAAQ,EAAE;UAC9B,IAAI;YACF7D,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEsC,OAAO,CAACd,KAAK,CAAC;YACtE,MAAMzC,eAAe,CAACuD,OAAO,CAACJ,EAAE,CAAC;YACjCnC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEsC,OAAO,CAACd,KAAK,CAAC;UACpD,CAAC,CAAC,OAAOd,KAAK,EAAE;YACdX,OAAO,CAACW,KAAK,CAAC,6BAA6B,EAAE4B,OAAO,CAACd,KAAK,EAAEd,KAAK,CAAC;YAClE;UACF;QACF;MACF;;MAEA;MACA,MAAM;QAAEA,KAAK,EAAEoD;MAAmB,CAAC,GAAG,MAAMjF,QAAQ,CACjD+B,IAAI,CAAC,UAAU,CAAC,CAChBmD,MAAM,CAAC,CAAC,CACR1B,EAAE,CAAC,YAAY,EAAEkB,SAAS,CAAC;MAE9B,IAAIO,kBAAkB,EAAE;QACtB/D,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAEoD,kBAAkB,CAAC;QAC/D;MACF,CAAC,MAAM;QACL/D,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACnC;;MAEA;MACA,MAAM;QAAEU,KAAK,EAAEsD;MAAmB,CAAC,GAAG,MAAMnF,QAAQ,CACjD+B,IAAI,CAAC,WAAW,CAAC,CACjBmD,MAAM,CAAC,CAAC,CACR1B,EAAE,CAAC,IAAI,EAAEkB,SAAS,CAAC;MAEtB,IAAIS,kBAAkB,EAAE;QACtBjE,OAAO,CAACW,KAAK,CAAC,4BAA4B,EAAEsD,kBAAkB,CAAC;QAC/D,MAAM,IAAI5C,KAAK,CAAC,6BAA6B4C,kBAAkB,CAAC3C,OAAO,EAAE,CAAC;MAC5E;MAEAtB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MAExD,OAAO;QACLiD,OAAO,EAAE,IAAI;QACb5B,OAAO,EAAE,eAAe,CAAAuC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEvD,MAAM,KAAI,CAAC;MAC/C,CAAC;IAEH,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}