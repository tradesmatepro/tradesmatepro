{"ast":null,"code":"import { supabase } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow\r\n   * Calls secure Edge Function to handle all steps with service key\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      tempPassword\n    } = formData;\n    try {\n      console.log('üöÄ Starting company creation via Edge Function...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Call secure Edge Function that handles all steps with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('create-company-with-owner', {\n        body: {\n          companyName,\n          ownerFirstName,\n          ownerLastName,\n          ownerEmail,\n          ownerPhone,\n          tempPassword\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to create company: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company creation failed:', data.error);\n        throw new Error(data.error || 'Company creation failed');\n      }\n      console.log('üéâ Company creation completed successfully!');\n      console.log('‚úÖ Result:', data);\n      return {\n        company: data.company,\n        authUser: data.authUser,\n        profile: data.profile,\n        success: true\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - no edge functions, no CORS headaches\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","tempPassword","console","log","data","error","functions","invoke","body","Error","message","success","company","authUser","profile","getAllCompanies","companies","from","select","order","ascending","length","getCompanyDetails","companyId"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow\r\n   * Calls secure Edge Function to handle all steps with service key\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation via Edge Function...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Call secure Edge Function that handles all steps with service key\r\n      const { data, error } = await supabase.functions.invoke('create-company-with-owner', {\r\n        body: {\r\n          companyName,\r\n          ownerFirstName,\r\n          ownerLastName,\r\n          ownerEmail,\r\n          ownerPhone,\r\n          tempPassword\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to create company: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company creation failed:', data.error);\r\n        throw new Error(data.error || 'Company creation failed');\r\n      }\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ Result:', data);\r\n\r\n      return {\r\n        company: data.company,\r\n        authUser: data.authUser,\r\n        profile: data.profile,\r\n        success: true\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - no edge functions, no CORS headaches\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}