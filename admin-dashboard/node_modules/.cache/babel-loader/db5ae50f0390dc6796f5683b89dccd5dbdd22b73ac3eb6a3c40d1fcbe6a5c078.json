{"ast":null,"code":"import { supabase, supabaseService } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    try {\n      var _authUser$user, _profile;\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Step 1: Generate company number in required format C-######\n      const companyNumber = `C-${Math.floor(100000 + Math.random() * 900000)}`;\n      console.log('üî¢ Generated company number:', companyNumber);\n\n      // Step 2: Create the company\n      const {\n        data: company,\n        error: companyError\n      } = await supabase.from('companies').insert({\n        company_number: companyNumber,\n        name: companyName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (companyError) {\n        console.error('‚ùå Company creation failed:', companyError);\n        throw new Error(`Failed to create company: ${companyError.message}`);\n      }\n      console.log('‚úÖ Company created:', company);\n\n      // Step 2: Create auth user using SERVICE KEY (your app, your computer!)\n      console.log('üîë Using service client for user creation...');\n      console.log('üìß Creating auth user for:', ownerEmail);\n      const {\n        data: authUser,\n        error: authError\n      } = await supabaseService.auth.admin.createUser({\n        email: ownerEmail,\n        password: tempPassword,\n        email_confirm: true,\n        user_metadata: {\n          role: ownerRole\n        }\n      });\n      console.log('üîç Auth user creation result:', {\n        authUser: authUser === null || authUser === void 0 ? void 0 : (_authUser$user = authUser.user) === null || _authUser$user === void 0 ? void 0 : _authUser$user.email,\n        error: authError\n      });\n      if (authError) {\n        console.error('‚ùå Auth user creation failed:', authError);\n        throw new Error(`Failed to create user: ${authError.message}`);\n      }\n      console.log('‚úÖ Auth user created:', authUser.user.email);\n\n      // Step 3: Create or update profile\n      console.log('üë§ Creating/updating profile for user ID:', authUser.user.id);\n\n      // First check if profile already exists\n      const {\n        data: existingProfile\n      } = await supabase.from('profiles').select('id').eq('id', authUser.user.id).single();\n      let profile;\n      if (existingProfile) {\n        console.log('üìù Profile exists, updating...');\n        // Update existing profile\n        const {\n          data: updatedProfile,\n          error: updateError\n        } = await supabase.from('profiles').update({\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          email: ownerEmail,\n          phone: ownerPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).eq('id', authUser.user.id).select().single();\n        if (updateError) {\n          console.error('‚ùå Profile update failed:', updateError);\n          throw new Error(`Failed to update profile: ${updateError.message}`);\n        }\n        profile = updatedProfile;\n      } else {\n        console.log('üÜï Creating new profile...');\n        // Create new profile\n        const {\n          data: newProfile,\n          error: createError\n        } = await supabase.from('profiles').insert({\n          id: authUser.user.id,\n          first_name: ownerFirstName,\n          last_name: ownerLastName,\n          email: ownerEmail,\n          phone: ownerPhone,\n          role: ownerRole,\n          company_id: company.id\n        }).select().single();\n        if (createError) {\n          console.error('‚ùå Profile creation failed:', createError);\n          throw new Error(`Failed to create profile: ${createError.message}`);\n        }\n        profile = newProfile;\n      }\n      console.log('üîç Profile result:', {\n        profile: (_profile = profile) === null || _profile === void 0 ? void 0 : _profile.email\n      });\n      console.log('üéâ Company creation completed successfully!');\n      console.log('‚úÖ VERIFICATION:');\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\n      console.log('  üîê Auth User:', authUser.user.email, '(ID:', authUser.user.id, ')');\n      console.log('  üë§ Profile:', profile.email, '(Role:', profile.role, ')');\n      return {\n        company,\n        authUser: authUser.user,\n        profile,\n        success: true,\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('üë• Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (requires service key)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('üîê Deleting auth user:', profile.email);\n            const {\n              error: authDeleteError\n            } = await supabaseService.auth.admin.deleteUser(profile.id);\n            if (authDeleteError) {\n              console.error('‚ùå Failed to delete auth user:', profile.email, authDeleteError);\n              // Continue with other deletions even if one fails\n            } else {\n              console.log('‚úÖ Auth user deleted:', profile.email);\n            }\n          } catch (error) {\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\n            // Continue with other deletions\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('‚úÖ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('‚úÖ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseService","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","_authUser$user","_profile","console","log","companyNumber","Math","floor","random","data","company","error","companyError","from","insert","company_number","name","created_at","Date","toISOString","select","single","Error","message","authUser","authError","auth","admin","createUser","email","password","email_confirm","user_metadata","role","user","id","existingProfile","eq","profile","updatedProfile","updateError","update","first_name","last_name","phone","company_id","newProfile","createError","success","getAllCompanies","companies","order","ascending","length","getCompanyDetails","companyId","functions","invoke","body","deleteCompany","profiles","profilesError","authDeleteError","deleteUser","profileDeleteError","delete","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseService } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Step 1: Generate company number in required format C-######\r\n      const companyNumber = `C-${Math.floor(100000 + Math.random() * 900000)}`;\r\n      console.log('üî¢ Generated company number:', companyNumber);\r\n\r\n      // Step 2: Create the company\r\n      const { data: company, error: companyError } = await supabase\r\n        .from('companies')\r\n        .insert({\r\n          company_number: companyNumber,\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        console.error('‚ùå Company creation failed:', companyError);\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company created:', company);\r\n\r\n      // Step 2: Create auth user using SERVICE KEY (your app, your computer!)\r\n      console.log('üîë Using service client for user creation...');\r\n      console.log('üìß Creating auth user for:', ownerEmail);\r\n\r\n      const { data: authUser, error: authError } = await supabaseService.auth.admin.createUser({\r\n        email: ownerEmail,\r\n        password: tempPassword,\r\n        email_confirm: true,\r\n        user_metadata: { role: ownerRole }\r\n      });\r\n\r\n      console.log('üîç Auth user creation result:', { authUser: authUser?.user?.email, error: authError });\r\n\r\n      if (authError) {\r\n        console.error('‚ùå Auth user creation failed:', authError);\r\n        throw new Error(`Failed to create user: ${authError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Auth user created:', authUser.user.email);\r\n\r\n      // Step 3: Create or update profile\r\n      console.log('üë§ Creating/updating profile for user ID:', authUser.user.id);\r\n\r\n      // First check if profile already exists\r\n      const { data: existingProfile } = await supabase\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('id', authUser.user.id)\r\n        .single();\r\n\r\n      let profile;\r\n      if (existingProfile) {\r\n        console.log('üìù Profile exists, updating...');\r\n        // Update existing profile\r\n        const { data: updatedProfile, error: updateError } = await supabase\r\n          .from('profiles')\r\n          .update({\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: ownerPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .eq('id', authUser.user.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          console.error('‚ùå Profile update failed:', updateError);\r\n          throw new Error(`Failed to update profile: ${updateError.message}`);\r\n        }\r\n        profile = updatedProfile;\r\n      } else {\r\n        console.log('üÜï Creating new profile...');\r\n        // Create new profile\r\n        const { data: newProfile, error: createError } = await supabase\r\n          .from('profiles')\r\n          .insert({\r\n            id: authUser.user.id,\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: ownerPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          console.error('‚ùå Profile creation failed:', createError);\r\n          throw new Error(`Failed to create profile: ${createError.message}`);\r\n        }\r\n        profile = newProfile;\r\n      }\r\n\r\n      console.log('üîç Profile result:', { profile: profile?.email });\r\n\r\n\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ VERIFICATION:');\r\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\r\n      console.log('  üîê Auth User:', authUser.user.email, '(ID:', authUser.user.id, ')');\r\n      console.log('  üë§ Profile:', profile.email, '(Role:', profile.role, ')');\r\n\r\n      return {\r\n        company,\r\n        authUser: authUser.user,\r\n        profile,\r\n        success: true,\r\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (requires service key)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user:', profile.email);\r\n            const { error: authDeleteError } = await supabaseService.auth.admin.deleteUser(profile.id);\r\n\r\n            if (authDeleteError) {\r\n              console.error('‚ùå Failed to delete auth user:', profile.email, authDeleteError);\r\n              // Continue with other deletions even if one fails\r\n            } else {\r\n              console.log('‚úÖ Auth user deleted:', profile.email);\r\n            }\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}