{"ast":null,"code":"import { supabase } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow\r\n   * Calls secure Edge Function to handle all steps with service key\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      tempPassword\n    } = formData;\n    try {\n      console.log('üöÄ Starting company creation via Edge Function...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Call secure Edge Function that handles all steps with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('create-company-with-owner', {\n        body: {\n          companyName,\n          ownerFirstName,\n          ownerLastName,\n          ownerEmail,\n          ownerPhone,\n          tempPassword\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to create company: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company creation failed:', data.error);\n        throw new Error(data.error || 'Company creation failed');\n      }\n      console.log('üéâ Company creation completed successfully!');\n      console.log('‚úÖ Result:', data);\n      return {\n        company: data.company,\n        authUser: data.authUser,\n        profile: data.profile,\n        success: true\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies with owner information\r\n   */\n  static async getAllCompanies() {\n    try {\n      // Get companies and find owners via profiles table\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Error fetching companies:', error);\n        throw error;\n      }\n\n      // For each company, find the owner (profile with role = 'OWNER')\n      const companiesWithOwners = await Promise.all((companies || []).map(async company => {\n        try {\n          // Find owner profile for this company\n          const {\n            data: ownerProfile,\n            error: profileError\n          } = await supabase.from('profiles').select('id, full_name, phone').eq('company_id', company.id).eq('role', 'OWNER').single();\n          if (profileError && profileError.code !== 'PGRST116') {\n            console.error('Error fetching owner profile:', profileError);\n          }\n          return {\n            ...company,\n            owner_profile: ownerProfile,\n            owner_email: 'Available via Edge Function'\n          };\n        } catch (error) {\n          console.error('Error processing company:', error);\n          return {\n            ...company,\n            owner_profile: null,\n            owner_email: 'N/A'\n          };\n        }\n      }));\n      return companiesWithOwners;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      const {\n        data: company,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at\n        `).eq('id', companyId).single();\n      if (error) {\n        console.error('‚ùå Error fetching company details:', error);\n        throw error;\n      }\n\n      // Get all profiles for this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, full_name, role, phone, created_at').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching profiles:', profilesError);\n        throw profilesError;\n      }\n\n      // Find owner and employees\n      const owner = profiles === null || profiles === void 0 ? void 0 : profiles.find(p => p.role === 'OWNER');\n      const employees = (profiles === null || profiles === void 0 ? void 0 : profiles.filter(p => p.role !== 'OWNER')) || [];\n      return {\n        ...company,\n        owner_profile: owner,\n        owner_email: 'Available via Edge Function',\n        employees: employees.map(emp => ({\n          ...emp,\n          email: 'Available via Edge Function'\n        }))\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","tempPassword","console","log","data","error","functions","invoke","body","Error","message","success","company","authUser","profile","getAllCompanies","companies","from","select","order","ascending","companiesWithOwners","Promise","all","map","ownerProfile","profileError","eq","id","single","code","owner_profile","owner_email","getCompanyDetails","companyId","profiles","profilesError","owner","find","p","role","employees","filter","emp","email"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow\r\n   * Calls secure Edge Function to handle all steps with service key\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation via Edge Function...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Call secure Edge Function that handles all steps with service key\r\n      const { data, error } = await supabase.functions.invoke('create-company-with-owner', {\r\n        body: {\r\n          companyName,\r\n          ownerFirstName,\r\n          ownerLastName,\r\n          ownerEmail,\r\n          ownerPhone,\r\n          tempPassword\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to create company: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company creation failed:', data.error);\r\n        throw new Error(data.error || 'Company creation failed');\r\n      }\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ Result:', data);\r\n\r\n      return {\r\n        company: data.company,\r\n        authUser: data.authUser,\r\n        profile: data.profile,\r\n        success: true\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies with owner information\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      // Get companies and find owners via profiles table\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Error fetching companies:', error);\r\n        throw error;\r\n      }\r\n\r\n      // For each company, find the owner (profile with role = 'OWNER')\r\n      const companiesWithOwners = await Promise.all(\r\n        (companies || []).map(async (company) => {\r\n          try {\r\n            // Find owner profile for this company\r\n            const { data: ownerProfile, error: profileError } = await supabase\r\n              .from('profiles')\r\n              .select('id, full_name, phone')\r\n              .eq('company_id', company.id)\r\n              .eq('role', 'OWNER')\r\n              .single();\r\n\r\n            if (profileError && profileError.code !== 'PGRST116') {\r\n              console.error('Error fetching owner profile:', profileError);\r\n            }\r\n\r\n            return {\r\n              ...company,\r\n              owner_profile: ownerProfile,\r\n              owner_email: 'Available via Edge Function'\r\n            };\r\n          } catch (error) {\r\n            console.error('Error processing company:', error);\r\n            return {\r\n              ...company,\r\n              owner_profile: null,\r\n              owner_email: 'N/A'\r\n            };\r\n          }\r\n        })\r\n      );\r\n\r\n      return companiesWithOwners;\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      const { data: company, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at\r\n        `)\r\n        .eq('id', companyId)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('‚ùå Error fetching company details:', error);\r\n        throw error;\r\n      }\r\n\r\n      // Get all profiles for this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, full_name, role, phone, created_at')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching profiles:', profilesError);\r\n        throw profilesError;\r\n      }\r\n\r\n      // Find owner and employees\r\n      const owner = profiles?.find(p => p.role === 'OWNER');\r\n      const employees = profiles?.filter(p => p.role !== 'OWNER') || [];\r\n\r\n      return {\r\n        ...company,\r\n        owner_profile: owner,\r\n        owner_email: 'Available via Edge Function',\r\n        employees: employees.map(emp => ({ ...emp, email: 'Available via Edge Function' }))\r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}