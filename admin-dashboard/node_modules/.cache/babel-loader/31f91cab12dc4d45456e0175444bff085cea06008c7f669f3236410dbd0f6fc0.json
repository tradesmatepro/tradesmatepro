{"ast":null,"code":"import { supabase, supabaseAdmin, hasAdminBypass, adminDeleteUser } from '../supabaseClient';\n\n/**\n * User Management Service\n * Handles user deletion and related operations\n */\nexport class UserService {\n  /**\n   * Delete a single user and all associated data\n   * @param {string} userId - User ID to delete (from users table)\n   * @param {string} userEmail - User email (for logging)\n   * @returns {object} - Success status and message\n   */\n  static async deleteUser(userId, userEmail) {\n    try {\n      console.log('üóëÔ∏è Starting user deletion for ID:', userId, 'Email:', userEmail);\n      if (!hasAdminBypass || !supabaseAdmin) {\n        throw new Error('Admin bypass required - service key not configured');\n      }\n\n      // Step 1: Delete auth user (using secure Edge Function)\n      try {\n        console.log('üîê Deleting auth user via Edge Function:', userEmail);\n        await adminDeleteUser(userId);\n        console.log('‚úÖ Auth user deleted:', userEmail);\n      } catch (error) {\n        console.error('‚ùå Error deleting auth user:', userEmail, error);\n        // Continue with user deletion even if auth deletion fails\n      }\n\n      // Step 2: Delete user record from users table\n      // This will cascade delete profiles and related data\n      // Use supabaseAdmin to bypass RLS\n      console.log('üîì Using admin client to delete user (bypass RLS)');\n      const {\n        error: userDeleteError\n      } = await supabaseAdmin.from('users').delete().eq('id', userId);\n      if (userDeleteError) {\n        console.error('‚ùå Error deleting user record:', userDeleteError);\n        throw new Error(`Failed to delete user record: ${userDeleteError.message}`);\n      }\n      console.log('‚úÖ User record deleted (profiles cascade deleted)');\n\n      // Step 3: Delete employee record if exists (cascade should handle, but be explicit)\n      try {\n        console.log('üîì Using admin client to delete employee (bypass RLS)');\n        const {\n          error: employeeDeleteError\n        } = await supabaseAdmin.from('employees').delete().eq('user_id', userId);\n        if (!employeeDeleteError) {\n          console.log('‚úÖ Employee record deleted (if existed)');\n        }\n      } catch (e) {\n        console.warn('‚ö†Ô∏è Employee deletion skipped (table may not exist):', e.message);\n      }\n      console.log('‚úÖ User deletion completed successfully');\n      return {\n        success: true,\n        message: `User ${userEmail} deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå User deletion workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete multiple users at once\n   * @param {array} userIds - Array of user IDs to delete\n   * @returns {object} - Success status and message\n   */\n  static async deleteMultipleUsers(userIds) {\n    try {\n      console.log('üóëÔ∏è Starting batch user deletion for', userIds.length, 'users');\n      let successCount = 0;\n      let failureCount = 0;\n      const failures = [];\n      for (const userId of userIds) {\n        try {\n          await this.deleteUser(userId, `User ${userId}`);\n          successCount++;\n        } catch (error) {\n          console.error('‚ùå Failed to delete user:', userId, error);\n          failureCount++;\n          failures.push({\n            userId,\n            error: error.message\n          });\n        }\n      }\n      console.log(`‚úÖ Batch deletion complete: ${successCount} succeeded, ${failureCount} failed`);\n      return {\n        success: failureCount === 0,\n        message: `Deleted ${successCount} users${failureCount > 0 ? `, ${failureCount} failed` : ''}`,\n        successCount,\n        failureCount,\n        failures\n      };\n    } catch (error) {\n      console.error('‚ùå Batch user deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseAdmin","hasAdminBypass","adminDeleteUser","UserService","deleteUser","userId","userEmail","console","log","Error","error","userDeleteError","from","delete","eq","message","employeeDeleteError","e","warn","success","deleteMultipleUsers","userIds","length","successCount","failureCount","failures","push"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/UserService.js"],"sourcesContent":["import { supabase, supabaseAdmin, hasAdminBypass, adminDeleteUser } from '../supabaseClient';\n\n/**\n * User Management Service\n * Handles user deletion and related operations\n */\nexport class UserService {\n\n  /**\n   * Delete a single user and all associated data\n   * @param {string} userId - User ID to delete (from users table)\n   * @param {string} userEmail - User email (for logging)\n   * @returns {object} - Success status and message\n   */\n  static async deleteUser(userId, userEmail) {\n    try {\n      console.log('üóëÔ∏è Starting user deletion for ID:', userId, 'Email:', userEmail);\n\n      if (!hasAdminBypass || !supabaseAdmin) {\n        throw new Error('Admin bypass required - service key not configured');\n      }\n\n      // Step 1: Delete auth user (using secure Edge Function)\n      try {\n        console.log('üîê Deleting auth user via Edge Function:', userEmail);\n        await adminDeleteUser(userId);\n        console.log('‚úÖ Auth user deleted:', userEmail);\n      } catch (error) {\n        console.error('‚ùå Error deleting auth user:', userEmail, error);\n        // Continue with user deletion even if auth deletion fails\n      }\n\n      // Step 2: Delete user record from users table\n      // This will cascade delete profiles and related data\n      // Use supabaseAdmin to bypass RLS\n      console.log('üîì Using admin client to delete user (bypass RLS)');\n      const { error: userDeleteError } = await supabaseAdmin\n        .from('users')\n        .delete()\n        .eq('id', userId);\n\n      if (userDeleteError) {\n        console.error('‚ùå Error deleting user record:', userDeleteError);\n        throw new Error(`Failed to delete user record: ${userDeleteError.message}`);\n      }\n\n      console.log('‚úÖ User record deleted (profiles cascade deleted)');\n\n      // Step 3: Delete employee record if exists (cascade should handle, but be explicit)\n      try {\n        console.log('üîì Using admin client to delete employee (bypass RLS)');\n        const { error: employeeDeleteError } = await supabaseAdmin\n          .from('employees')\n          .delete()\n          .eq('user_id', userId);\n\n        if (!employeeDeleteError) {\n          console.log('‚úÖ Employee record deleted (if existed)');\n        }\n      } catch (e) {\n        console.warn('‚ö†Ô∏è Employee deletion skipped (table may not exist):', e.message);\n      }\n\n      console.log('‚úÖ User deletion completed successfully');\n\n      return {\n        success: true,\n        message: `User ${userEmail} deleted successfully`\n      };\n\n    } catch (error) {\n      console.error('‚ùå User deletion workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete multiple users at once\n   * @param {array} userIds - Array of user IDs to delete\n   * @returns {object} - Success status and message\n   */\n  static async deleteMultipleUsers(userIds) {\n    try {\n      console.log('üóëÔ∏è Starting batch user deletion for', userIds.length, 'users');\n\n      let successCount = 0;\n      let failureCount = 0;\n      const failures = [];\n\n      for (const userId of userIds) {\n        try {\n          await this.deleteUser(userId, `User ${userId}`);\n          successCount++;\n        } catch (error) {\n          console.error('‚ùå Failed to delete user:', userId, error);\n          failureCount++;\n          failures.push({ userId, error: error.message });\n        }\n      }\n\n      console.log(`‚úÖ Batch deletion complete: ${successCount} succeeded, ${failureCount} failed`);\n\n      return {\n        success: failureCount === 0,\n        message: `Deleted ${successCount} users${failureCount > 0 ? `, ${failureCount} failed` : ''}`,\n        successCount,\n        failureCount,\n        failures\n      };\n\n    } catch (error) {\n      console.error('‚ùå Batch user deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}