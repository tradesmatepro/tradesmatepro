{"ast":null,"code":"import{supabase,adminCreateUser,adminDeleteUser,createCompanyWithOwner}from'../supabaseClient';/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */export class CompanyService{/**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */static async createCompanyWithOwner(formData){const{companyName,ownerFirstName,ownerLastName,ownerEmail,ownerPhone,ownerRole,tempPassword}=formData;try{var _authResult$user,_profile;console.log('üöÄ Starting company creation - DIRECT DATABASE...');console.log('üìù Form data:',{companyName,ownerFirstName,ownerLastName,ownerEmail,ownerPhone});// Format phone number to international format if provided\nlet formattedPhone=null;if(ownerPhone&&ownerPhone.trim()){// Remove all non-digits\nconst digitsOnly=ownerPhone.replace(/\\D/g,'');// Add +1 for US numbers if not already international format\nif(digitsOnly.length===10){formattedPhone=\"+1\".concat(digitsOnly);}else if(digitsOnly.length===11&&digitsOnly.startsWith('1')){formattedPhone=\"+\".concat(digitsOnly);}else if(ownerPhone.startsWith('+')){formattedPhone=ownerPhone;// Already formatted\n}else{console.warn('‚ö†Ô∏è Phone number format unclear, skipping:',ownerPhone);formattedPhone=null;// Skip invalid phone numbers\n}console.log('üì± Phone formatted:',ownerPhone,'‚Üí',formattedPhone);}// Step 1: Create the company (company_number will be auto-generated by database)\nconst{data:company,error:companyError}=await supabase.from('companies').insert({name:companyName,created_at:new Date().toISOString()}).select().single();if(companyError){console.error('‚ùå Company creation failed:',companyError);throw new Error(\"Failed to create company: \".concat(companyError.message));}console.log('‚úÖ Company created:',company);console.log('üî¢ Auto-generated company number:',company.company_number);// Step 2: Create auth user using SECURE EDGE FUNCTION\nconsole.log('üîë Using Edge Function for secure user creation...');console.log('üìß Creating auth user for:',ownerEmail);const authResult=await adminCreateUser({email:ownerEmail,password:tempPassword,firstName:ownerFirstName,lastName:ownerLastName,role:ownerRole,jobTitle:'Owner'});console.log('üîç Auth user creation result:',{user:authResult===null||authResult===void 0?void 0:(_authResult$user=authResult.user)===null||_authResult$user===void 0?void 0:_authResult$user.email});if(!authResult||!authResult.user){console.error('‚ùå Auth user creation failed: No user returned');throw new Error('Failed to create user: No user returned from Edge Function');}console.log('‚úÖ Auth user created:',authResult.user.email);// Step 3: Create users table record\nconsole.log('üë• Creating users table record...');const{data:userRecord,error:userError}=await supabase.from('users').insert({auth_user_id:authResult.user.id,company_id:company.id,role:ownerRole}).select().single();if(userError){console.error('‚ùå Users table record creation failed:',userError);throw new Error(\"Failed to create user record: \".concat(userError.message));}console.log('‚úÖ Users table record created:',userRecord.id);// Step 4: Create or update profile\nconsole.log('üë§ Creating/updating profile for user ID:',authResult.user.id);// First check if profile already exists\nconst{data:existingProfile}=await supabase.from('profiles').select('id').eq('user_id',authResult.user.id).single();let profile;if(existingProfile){console.log('üìù Profile exists, updating...');// Update existing profile\nconst{data:updatedProfile,error:updateError}=await supabase.from('profiles').update({first_name:ownerFirstName,last_name:ownerLastName,email:ownerEmail,phone:formattedPhone,role:ownerRole,company_id:company.id}).eq('user_id',authResult.user.id).select().single();if(updateError){console.error('‚ùå Profile update failed:',updateError);throw new Error(\"Failed to update profile: \".concat(updateError.message));}profile=updatedProfile;}else{console.log('üÜï Creating new profile...');// Create new profile\nconst{data:newProfile,error:createError}=await supabase.from('profiles').insert({user_id:authResult.user.id,first_name:ownerFirstName,last_name:ownerLastName,email:ownerEmail,phone:formattedPhone,role:ownerRole,company_id:company.id}).select().single();if(createError){console.error('‚ùå Profile creation failed:',createError);throw new Error(\"Failed to create profile: \".concat(createError.message));}profile=newProfile;}console.log('üîç Profile result:',{profile:(_profile=profile)===null||_profile===void 0?void 0:_profile.email});console.log('üéâ Company creation completed successfully!');console.log('‚úÖ VERIFICATION:');console.log('  üìä Company:',company.name,'(ID:',company.id,')');console.log('  üîê Auth User:',authResult.user.email,'(ID:',authResult.user.id,')');console.log('  üë• Users Record:',userRecord.id,'(Role:',userRecord.role,')');console.log('  üë§ Profile:',profile.email,'(Role:',profile.role,')');return{company,authUser:authResult.user,userRecord,profile,success:true,message:\"\\u2705 Complete! Company: \".concat(company.name,\" | Owner: \").concat(ownerEmail,\" | Password: \").concat(tempPassword)};}catch(error){console.error('‚ùå Company creation workflow failed:',error);throw error;}}/**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */static async getAllCompanies(){try{console.log('üè¢ Fetching companies directly from database...');// Direct database query - simple companies only first\nconst{data:companies,error}=await supabase.from('companies').select(\"\\n          id,\\n          name,\\n          created_at,\\n          created_by\\n        \").order('created_at',{ascending:false});if(error){console.error('‚ùå Database query failed:',error);throw new Error(\"Failed to fetch companies: \".concat(error.message));}console.log('‚úÖ Companies fetched successfully:',(companies===null||companies===void 0?void 0:companies.length)||0);return companies||[];}catch(error){console.error('‚ùå Failed to fetch companies:',error);throw error;}}/**\r\n   * Get company details with owner and employees via Edge Function\r\n   */static async getCompanyDetails(companyId){try{console.log('üè¢ Fetching company details via Edge Function for:',companyId);// Call secure Edge Function that handles profile fetching with service key\nconst{data,error}=await supabase.functions.invoke('get-company-details',{body:{companyId}});if(error){console.error('‚ùå Edge Function call failed:',error);throw new Error(\"Failed to fetch company details: \".concat(error.message));}if(!data.success){console.error('‚ùå Company details fetch failed:',data.error);throw new Error(data.error||'Company details fetch failed');}console.log('‚úÖ Company details fetched successfully');return data.company;}catch(error){console.error('‚ùå Failed to fetch company details:',error);throw error;}}/**\r\n   * Delete Company and All Associated Data\r\n   */static async deleteCompany(companyId){try{console.log('üóëÔ∏è Starting company deletion for ID:',companyId);// Step 1: Get all profiles associated with this company\nconst{data:profiles,error:profilesError}=await supabase.from('profiles').select('id, email').eq('company_id',companyId);if(profilesError){console.error('‚ùå Error fetching company profiles:',profilesError);throw new Error(\"Failed to fetch company profiles: \".concat(profilesError.message));}console.log('üë• Found profiles to delete:',(profiles===null||profiles===void 0?void 0:profiles.length)||0);// Step 2: Delete auth users (using secure Edge Function)\nif(profiles&&profiles.length>0){for(const profile of profiles){try{console.log('üîê Deleting auth user via Edge Function:',profile.email);await adminDeleteUser(profile.id);console.log('‚úÖ Auth user deleted:',profile.email);}catch(error){console.error('‚ùå Error deleting auth user:',profile.email,error);// Continue with other deletions even if one fails\n}}}// Step 3: Delete profiles (cascade should handle this, but let's be explicit)\nconst{error:profileDeleteError}=await supabase.from('profiles').delete().eq('company_id',companyId);if(profileDeleteError){console.error('‚ùå Error deleting profiles:',profileDeleteError);// Continue with company deletion\n}else{console.log('‚úÖ Profiles deleted');}// Step 4: Delete the company\nconst{error:companyDeleteError}=await supabase.from('companies').delete().eq('id',companyId);if(companyDeleteError){console.error('‚ùå Company deletion failed:',companyDeleteError);throw new Error(\"Failed to delete company: \".concat(companyDeleteError.message));}console.log('‚úÖ Company deletion completed successfully');return{success:true,message:\"Company and \".concat((profiles===null||profiles===void 0?void 0:profiles.length)||0,\" associated users deleted successfully\")};}catch(error){console.error('‚ùå Company deletion workflow failed:',error);throw error;}}}","map":{"version":3,"names":["supabase","adminCreateUser","adminDeleteUser","createCompanyWithOwner","CompanyService","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","_authResult$user","_profile","console","log","formattedPhone","trim","digitsOnly","replace","length","concat","startsWith","warn","data","company","error","companyError","from","insert","name","created_at","Date","toISOString","select","single","Error","message","company_number","authResult","email","password","firstName","lastName","role","jobTitle","user","userRecord","userError","auth_user_id","id","company_id","existingProfile","eq","profile","updatedProfile","updateError","update","first_name","last_name","phone","newProfile","createError","user_id","authUser","success","getAllCompanies","companies","order","ascending","getCompanyDetails","companyId","functions","invoke","body","deleteCompany","profiles","profilesError","profileDeleteError","delete","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, adminCreateUser, adminDeleteUser, createCompanyWithOwner } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Format phone number to international format if provided\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        // Remove all non-digits\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n\r\n        // Add +1 for US numbers if not already international format\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone; // Already formatted\r\n        } else {\r\n          console.warn('‚ö†Ô∏è Phone number format unclear, skipping:', ownerPhone);\r\n          formattedPhone = null; // Skip invalid phone numbers\r\n        }\r\n        console.log('üì± Phone formatted:', ownerPhone, '‚Üí', formattedPhone);\r\n      }\r\n\r\n      // Step 1: Create the company (company_number will be auto-generated by database)\r\n      const { data: company, error: companyError } = await supabase\r\n        .from('companies')\r\n        .insert({\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        console.error('‚ùå Company creation failed:', companyError);\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company created:', company);\r\n      console.log('üî¢ Auto-generated company number:', company.company_number);\r\n\r\n      // Step 2: Create auth user using SECURE EDGE FUNCTION\r\n      console.log('üîë Using Edge Function for secure user creation...');\r\n      console.log('üìß Creating auth user for:', ownerEmail);\r\n\r\n      const authResult = await adminCreateUser({\r\n        email: ownerEmail,\r\n        password: tempPassword,\r\n        firstName: ownerFirstName,\r\n        lastName: ownerLastName,\r\n        role: ownerRole,\r\n        jobTitle: 'Owner'\r\n      });\r\n\r\n      console.log('üîç Auth user creation result:', { user: authResult?.user?.email });\r\n\r\n      if (!authResult || !authResult.user) {\r\n        console.error('‚ùå Auth user creation failed: No user returned');\r\n        throw new Error('Failed to create user: No user returned from Edge Function');\r\n      }\r\n\r\n      console.log('‚úÖ Auth user created:', authResult.user.email);\r\n\r\n      // Step 3: Create users table record\r\n      console.log('üë• Creating users table record...');\r\n      const { data: userRecord, error: userError } = await supabase\r\n        .from('users')\r\n        .insert({\r\n          auth_user_id: authResult.user.id,\r\n          company_id: company.id,\r\n          role: ownerRole\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (userError) {\r\n        console.error('‚ùå Users table record creation failed:', userError);\r\n        throw new Error(`Failed to create user record: ${userError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Users table record created:', userRecord.id);\r\n\r\n      // Step 4: Create or update profile\r\n      console.log('üë§ Creating/updating profile for user ID:', authResult.user.id);\r\n\r\n      // First check if profile already exists\r\n      const { data: existingProfile } = await supabase\r\n        .from('profiles')\r\n        .select('id')\r\n        .eq('user_id', authResult.user.id)\r\n        .single();\r\n\r\n      let profile;\r\n      if (existingProfile) {\r\n        console.log('üìù Profile exists, updating...');\r\n        // Update existing profile\r\n        const { data: updatedProfile, error: updateError } = await supabase\r\n          .from('profiles')\r\n          .update({\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .eq('user_id', authResult.user.id)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) {\r\n          console.error('‚ùå Profile update failed:', updateError);\r\n          throw new Error(`Failed to update profile: ${updateError.message}`);\r\n        }\r\n        profile = updatedProfile;\r\n      } else {\r\n        console.log('üÜï Creating new profile...');\r\n        // Create new profile\r\n        const { data: newProfile, error: createError } = await supabase\r\n          .from('profiles')\r\n          .insert({\r\n            user_id: authResult.user.id,\r\n            first_name: ownerFirstName,\r\n            last_name: ownerLastName,\r\n            email: ownerEmail,\r\n            phone: formattedPhone,\r\n            role: ownerRole,\r\n            company_id: company.id\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) {\r\n          console.error('‚ùå Profile creation failed:', createError);\r\n          throw new Error(`Failed to create profile: ${createError.message}`);\r\n        }\r\n        profile = newProfile;\r\n      }\r\n\r\n      console.log('üîç Profile result:', { profile: profile?.email });\r\n\r\n\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n      console.log('‚úÖ VERIFICATION:');\r\n      console.log('  üìä Company:', company.name, '(ID:', company.id, ')');\r\n      console.log('  üîê Auth User:', authResult.user.email, '(ID:', authResult.user.id, ')');\r\n      console.log('  üë• Users Record:', userRecord.id, '(Role:', userRecord.role, ')');\r\n      console.log('  üë§ Profile:', profile.email, '(Role:', profile.role, ')');\r\n\r\n      return {\r\n        company,\r\n        authUser: authResult.user,\r\n        userRecord,\r\n        profile,\r\n        success: true,\r\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (using secure Edge Function)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\r\n            await adminDeleteUser(profile.id);\r\n            console.log('‚úÖ Auth user deleted:', profile.email);\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions even if one fails\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}