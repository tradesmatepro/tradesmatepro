{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../supabaseClient';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{let mounted=true;const checkAuth=async()=>{if(!mounted)return;try{console.log('üîç Admin Dashboard - Checking authentication...');const{data:{session},error}=await supabase.auth.getSession();if(!mounted)return;if(error){console.error('‚ùå Admin Dashboard - Auth error:',error);setUser(null);setLoading(false);return;}if(!session||!session.user){console.log('‚ùå Admin Dashboard - No session found');setUser(null);setLoading(false);return;}// Get user record first (fast query)\nconst{data:userRecord,error:userError}=await supabase.from('users').select('id, role, company_id, auth_user_id').eq('auth_user_id',session.user.id).single();if(!mounted)return;if(userError||!userRecord){console.error('‚ùå Admin Dashboard - User record error:',userError);setUser(null);setLoading(false);return;}// Only allow APP_OWNER role for admin dashboard\nif(userRecord.role!=='APP_OWNER'){console.log('‚ùå Admin Dashboard - Insufficient permissions. Role:',userRecord.role);setUser(null);setLoading(false);return;}// Create user data with fallback name (skip profile query for speed)\nconst userData={id:userRecord.id,email:session.user.email,full_name:'Admin User',// Use default name for faster login\nrole:userRecord.role,company_id:userRecord.company_id};console.log('‚úÖ Admin Dashboard - Authentication successful:',userData.email);setUser(userData);}catch(error){console.error('‚ùå Admin Dashboard - Auth check failed:',error);if(mounted){setUser(null);}}if(mounted){setLoading(false);}};// Initial check\ncheckAuth();// Listen for auth changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,session)=>{if(!mounted)return;console.log('üîê Admin Dashboard - Auth state changed:',event);if(event==='SIGNED_OUT'||!session){setUser(null);setLoading(false);}else if(event==='SIGNED_IN'||event==='TOKEN_REFRESHED'){// Small delay to prevent race conditions\nsetTimeout(()=>{if(mounted)checkAuth();},100);}});return()=>{mounted=false;subscription.unsubscribe();};},[]);const login=async(email,password)=>{try{console.log('üîê Admin Dashboard - Attempting login:',email);const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){throw new Error(error.message);}console.log('üîê Admin Dashboard - Login API successful');return data;}catch(error){console.error('‚ùå Admin Dashboard - Login failed:',error);throw error;}};const logout=async()=>{try{await supabase.auth.signOut();setUser(null);}catch(error){console.error('‚ùå Admin Dashboard - Logout failed:',error);}};const value={user,loading,login,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","mounted","checkAuth","console","log","data","session","error","auth","getSession","userRecord","userError","from","select","eq","id","single","role","userData","email","full_name","company_id","subscription","onAuthStateChange","event","setTimeout","unsubscribe","login","password","signInWithPassword","message","logout","signOut","value","Provider"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const checkAuth = async () => {\n      if (!mounted) return;\n\n      try {\n        console.log('üîç Admin Dashboard - Checking authentication...');\n\n        const { data: { session }, error } = await supabase.auth.getSession();\n\n        if (!mounted) return;\n\n        if (error) {\n          console.error('‚ùå Admin Dashboard - Auth error:', error);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        if (!session || !session.user) {\n          console.log('‚ùå Admin Dashboard - No session found');\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user record first (fast query)\n        const { data: userRecord, error: userError } = await supabase\n          .from('users')\n          .select('id, role, company_id, auth_user_id')\n          .eq('auth_user_id', session.user.id)\n          .single();\n\n        if (!mounted) return;\n\n        if (userError || !userRecord) {\n          console.error('‚ùå Admin Dashboard - User record error:', userError);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Only allow APP_OWNER role for admin dashboard\n        if (userRecord.role !== 'APP_OWNER') {\n          console.log('‚ùå Admin Dashboard - Insufficient permissions. Role:', userRecord.role);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Create user data with fallback name (skip profile query for speed)\n        const userData = {\n          id: userRecord.id,\n          email: session.user.email,\n          full_name: 'Admin User', // Use default name for faster login\n          role: userRecord.role,\n          company_id: userRecord.company_id\n        };\n\n        console.log('‚úÖ Admin Dashboard - Authentication successful:', userData.email);\n        setUser(userData);\n\n      } catch (error) {\n        console.error('‚ùå Admin Dashboard - Auth check failed:', error);\n        if (mounted) {\n          setUser(null);\n        }\n      }\n\n      if (mounted) {\n        setLoading(false);\n      }\n    };\n\n    // Initial check\n    checkAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (!mounted) return;\n\n      console.log('üîê Admin Dashboard - Auth state changed:', event);\n\n      if (event === 'SIGNED_OUT' || !session) {\n        setUser(null);\n        setLoading(false);\n      } else if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        // Small delay to prevent race conditions\n        setTimeout(() => {\n          if (mounted) checkAuth();\n        }, 100);\n      }\n    });\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      console.log('üîê Admin Dashboard - Attempting login:', email);\n\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      console.log('üîê Admin Dashboard - Login API successful');\n      return data;\n\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Login failed:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Logout failed:', error);\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}