{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';const supabaseUrl=process.env.REACT_APP_SUPABASE_URL;const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY;const supabaseServiceKey=process.env.REACT_APP_SUPABASE_SERVICE_KEY;if(!supabaseUrl||!supabaseAnonKey){throw new Error('Missing Supabase environment variables');}// SECURITY: Only use anon key in browser - service key operations moved to Edge Functions\nif(supabaseServiceKey){console.warn('‚ö†Ô∏è SECURITY WARNING: REACT_APP_SUPABASE_SERVICE_KEY detected in browser environment!');console.warn('‚ö†Ô∏è Service key should NEVER be in browser code. Remove from .env and use Edge Functions.');}// Regular client for normal operations (anon key only)\nexport const supabase=createClient(supabaseUrl,supabaseAnonKey,{auth:{persistSession:true,autoRefreshToken:true,detectSessionInUrl:true}});/**\n * Admin Create User - Secure Edge Function Wrapper\n * Replaces direct service key usage for user creation\n */export async function adminCreateUser(_ref){let{email,password,firstName,lastName,role,jobTitle}=_ref;const{data:session}=await supabase.auth.getSession();if(!(session!==null&&session!==void 0&&session.session)){throw new Error('Not authenticated');}const{data,error}=await supabase.functions.invoke('admin-create-user',{body:{email,password,firstName,lastName,role,jobTitle}});if(error)throw error;return data;}/**\n * Admin Delete User - Secure Edge Function Wrapper\n * Replaces direct service key usage for user deletion\n */export async function adminDeleteUser(userId){const{data:session}=await supabase.auth.getSession();if(!(session!==null&&session!==void 0&&session.session)){throw new Error('Not authenticated');}const{data,error}=await supabase.functions.invoke('admin-delete-user',{body:{userId}});if(error)throw error;return data;}/**\n * Create Company with Owner - Secure Edge Function Wrapper\n * Replaces direct service key usage for company creation\n */export async function createCompanyWithOwner(_ref2){let{companyName,ownerFirstName,ownerLastName,ownerEmail,ownerPhone,tempPassword}=_ref2;const{data,error}=await supabase.functions.invoke('create-company-with-owner',{body:{companyName,ownerFirstName,ownerLastName,ownerEmail,ownerPhone,tempPassword}});if(error)throw error;return data;}console.log('‚úÖ Supabase client initialized (anon key only - secure)');console.log('üìç URL:',supabaseUrl);console.log('üîí Admin operations routed through Edge Functions');","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabaseServiceKey","REACT_APP_SUPABASE_SERVICE_KEY","Error","console","warn","supabase","auth","persistSession","autoRefreshToken","detectSessionInUrl","adminCreateUser","_ref","email","password","firstName","lastName","role","jobTitle","data","session","getSession","error","functions","invoke","body","adminDeleteUser","userId","createCompanyWithOwner","_ref2","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","tempPassword","log"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabaseServiceKey = process.env.REACT_APP_SUPABASE_SERVICE_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\n// SECURITY: Only use anon key in browser - service key operations moved to Edge Functions\nif (supabaseServiceKey) {\n  console.warn('‚ö†Ô∏è SECURITY WARNING: REACT_APP_SUPABASE_SERVICE_KEY detected in browser environment!');\n  console.warn('‚ö†Ô∏è Service key should NEVER be in browser code. Remove from .env and use Edge Functions.');\n}\n\n// Regular client for normal operations (anon key only)\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n    detectSessionInUrl: true\n  }\n});\n\n/**\n * Admin Create User - Secure Edge Function Wrapper\n * Replaces direct service key usage for user creation\n */\nexport async function adminCreateUser({ email, password, firstName, lastName, role, jobTitle }) {\n  const { data: session } = await supabase.auth.getSession();\n  if (!session?.session) {\n    throw new Error('Not authenticated');\n  }\n\n  const { data, error } = await supabase.functions.invoke('admin-create-user', {\n    body: { email, password, firstName, lastName, role, jobTitle }\n  });\n\n  if (error) throw error;\n  return data;\n}\n\n/**\n * Admin Delete User - Secure Edge Function Wrapper\n * Replaces direct service key usage for user deletion\n */\nexport async function adminDeleteUser(userId) {\n  const { data: session } = await supabase.auth.getSession();\n  if (!session?.session) {\n    throw new Error('Not authenticated');\n  }\n\n  const { data, error } = await supabase.functions.invoke('admin-delete-user', {\n    body: { userId }\n  });\n\n  if (error) throw error;\n  return data;\n}\n\n/**\n * Create Company with Owner - Secure Edge Function Wrapper\n * Replaces direct service key usage for company creation\n */\nexport async function createCompanyWithOwner({ companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword }) {\n  const { data, error } = await supabase.functions.invoke('create-company-with-owner', {\n    body: { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword }\n  });\n\n  if (error) throw error;\n  return data;\n}\n\nconsole.log('‚úÖ Supabase client initialized (anon key only - secure)');\nconsole.log('üìç URL:', supabaseUrl);\nconsole.log('üîí Admin operations routed through Edge Functions');\n\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,uBAAuB,CAEpD,KAAM,CAAAC,WAAW,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CACtD,KAAM,CAAAC,eAAe,CAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B,CAC/D,KAAM,CAAAC,kBAAkB,CAAGL,OAAO,CAACC,GAAG,CAACK,8BAA8B,CAErE,GAAI,CAACP,WAAW,EAAI,CAACI,eAAe,CAAE,CACpC,KAAM,IAAI,CAAAI,KAAK,CAAC,wCAAwC,CAAC,CAC3D,CAEA;AACA,GAAIF,kBAAkB,CAAE,CACtBG,OAAO,CAACC,IAAI,CAAC,sFAAsF,CAAC,CACpGD,OAAO,CAACC,IAAI,CAAC,0FAA0F,CAAC,CAC1G,CAEA;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAGZ,YAAY,CAACC,WAAW,CAAEI,eAAe,CAAE,CACjEQ,IAAI,CAAE,CACJC,cAAc,CAAE,IAAI,CACpBC,gBAAgB,CAAE,IAAI,CACtBC,kBAAkB,CAAE,IACtB,CACF,CAAC,CAAC,CAEF;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAC,eAAeA,CAAAC,IAAA,CAA2D,IAA1D,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,QAAQ,CAAEC,IAAI,CAAEC,QAAS,CAAC,CAAAN,IAAA,CAC5F,KAAM,CAAEO,IAAI,CAAEC,OAAQ,CAAC,CAAG,KAAM,CAAAd,QAAQ,CAACC,IAAI,CAACc,UAAU,CAAC,CAAC,CAC1D,GAAI,EAACD,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEA,OAAO,EAAE,CACrB,KAAM,IAAI,CAAAjB,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA,KAAM,CAAEgB,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAAhB,QAAQ,CAACiB,SAAS,CAACC,MAAM,CAAC,mBAAmB,CAAE,CAC3EC,IAAI,CAAE,CAAEZ,KAAK,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,QAAQ,CAAEC,IAAI,CAAEC,QAAS,CAC/D,CAAC,CAAC,CAEF,GAAII,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAAAH,IAAI,CACb,CAEA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAO,eAAeA,CAACC,MAAM,CAAE,CAC5C,KAAM,CAAER,IAAI,CAAEC,OAAQ,CAAC,CAAG,KAAM,CAAAd,QAAQ,CAACC,IAAI,CAACc,UAAU,CAAC,CAAC,CAC1D,GAAI,EAACD,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEA,OAAO,EAAE,CACrB,KAAM,IAAI,CAAAjB,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA,KAAM,CAAEgB,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAAhB,QAAQ,CAACiB,SAAS,CAACC,MAAM,CAAC,mBAAmB,CAAE,CAC3EC,IAAI,CAAE,CAAEE,MAAO,CACjB,CAAC,CAAC,CAEF,GAAIL,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAAAH,IAAI,CACb,CAEA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAS,sBAAsBA,CAAAC,KAAA,CAAuF,IAAtF,CAAEC,WAAW,CAAEC,cAAc,CAAEC,aAAa,CAAEC,UAAU,CAAEC,UAAU,CAAEC,YAAa,CAAC,CAAAN,KAAA,CAC/H,KAAM,CAAEV,IAAI,CAAEG,KAAM,CAAC,CAAG,KAAM,CAAAhB,QAAQ,CAACiB,SAAS,CAACC,MAAM,CAAC,2BAA2B,CAAE,CACnFC,IAAI,CAAE,CAAEK,WAAW,CAAEC,cAAc,CAAEC,aAAa,CAAEC,UAAU,CAAEC,UAAU,CAAEC,YAAa,CAC3F,CAAC,CAAC,CAEF,GAAIb,KAAK,CAAE,KAAM,CAAAA,KAAK,CACtB,MAAO,CAAAH,IAAI,CACb,CAEAf,OAAO,CAACgC,GAAG,CAAC,wDAAwD,CAAC,CACrEhC,OAAO,CAACgC,GAAG,CAAC,SAAS,CAAEzC,WAAW,CAAC,CACnCS,OAAO,CAACgC,GAAG,CAAC,mDAAmD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}