{"ast":null,"code":"var _jsxFileName = \"D:\\\\TradeMate Pro Webapp\\\\admin-dashboard\\\\src\\\\contexts\\\\AdminAuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminAuthContext = /*#__PURE__*/createContext({});\nexport const useAdminAuth = () => {\n  _s();\n  const context = useContext(AdminAuthContext);\n  if (!context) {\n    throw new Error('useAdminAuth must be used within AdminAuthProvider');\n  }\n  return context;\n};\n_s(useAdminAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AdminAuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false);\n  const checkSuperAdminAccess = async session => {\n    var _session$user;\n    if (!(session !== null && session !== void 0 && (_session$user = session.user) !== null && _session$user !== void 0 && _session$user.id)) {\n      console.log('❌ No session found');\n      return false;\n    }\n    try {\n      // Get user profile to check role\n      const {\n        data: profileData,\n        error\n      } = await supabase.from('profiles').select('id, role, full_name, company_id').eq('id', session.user.id).single();\n      if (error) {\n        console.error('❌ Error fetching profile:', error);\n        return false;\n      }\n      if (!profileData) {\n        console.log('❌ No profile found for user');\n        return false;\n      }\n      console.log('👤 Profile loaded:', profileData);\n\n      // Check if user has SUPER_ADMIN role\n      if (profileData.role !== 'SUPER_ADMIN') {\n        console.log('❌ User is not SUPER_ADMIN, role:', profileData.role);\n        return false;\n      }\n      console.log('✅ SUPER_ADMIN access confirmed');\n      setProfile(profileData);\n      return true;\n    } catch (error) {\n      console.error('❌ Error checking super admin access:', error);\n      return false;\n    }\n  };\n  const initializeAuth = async () => {\n    try {\n      console.log('🔍 Initializing Admin Dashboard authentication...');\n\n      // Get current session\n      const {\n        data: {\n          session\n        },\n        error\n      } = await supabase.auth.getSession();\n      if (error) {\n        console.error('❌ Error getting session:', error);\n        setLoading(false);\n        return;\n      }\n      if (!session) {\n        console.log('❌ No session found - user needs to log in');\n        setLoading(false);\n        return;\n      }\n      console.log('✅ Session found for user:', session.user.email);\n\n      // Check SUPER_ADMIN access\n      const hasAccess = await checkSuperAdminAccess(session);\n      if (hasAccess) {\n        setUser(session.user);\n        setIsAuthenticated(true);\n        setIsSuperAdmin(true);\n        console.log('✅ Admin Dashboard access granted');\n      } else {\n        console.log('❌ Access denied - user needs SUPER_ADMIN role');\n        // Don't redirect - let AdminRoute handle the access denied screen\n        setUser(session.user);\n        setIsAuthenticated(true);\n        setIsSuperAdmin(false);\n      }\n    } catch (error) {\n      console.error('❌ Error initializing auth:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    initializeAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('🔐 Admin auth state changed:', event);\n      if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setIsAuthenticated(false);\n        setIsSuperAdmin(false);\n        console.log('👋 User signed out');\n      } else if (event === 'SIGNED_IN' && session) {\n        console.log('👋 User signed in:', session.user.email);\n        const hasAccess = await checkSuperAdminAccess(session);\n        if (hasAccess) {\n          setUser(session.user);\n          setIsAuthenticated(true);\n          setIsSuperAdmin(true);\n        } else {\n          // Redirect non-admin users\n          window.location.href = 'http://localhost:3000/app';\n        }\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n      setProfile(null);\n      setIsAuthenticated(false);\n      setIsSuperAdmin(false);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n  const value = {\n    user,\n    profile,\n    loading,\n    isAuthenticated,\n    isSuperAdmin,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AdminAuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s2(AdminAuthProvider, \"zGFJKieE6nE60w6xXmqFMC0U89w=\");\n_c = AdminAuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AdminAuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AdminAuthContext","useAdminAuth","_s","context","Error","AdminAuthProvider","children","_s2","user","setUser","profile","setProfile","loading","setLoading","isAuthenticated","setIsAuthenticated","isSuperAdmin","setIsSuperAdmin","checkSuperAdminAccess","session","_session$user","id","console","log","data","profileData","error","from","select","eq","single","role","initializeAuth","auth","getSession","email","hasAccess","subscription","onAuthStateChange","event","window","location","href","unsubscribe","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/contexts/AdminAuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst AdminAuthContext = createContext({});\n\nexport const useAdminAuth = () => {\n  const context = useContext(AdminAuthContext);\n  if (!context) {\n    throw new Error('useAdminAuth must be used within AdminAuthProvider');\n  }\n  return context;\n};\n\nexport const AdminAuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false);\n\n  const checkSuperAdminAccess = async (session) => {\n    if (!session?.user?.id) {\n      console.log('❌ No session found');\n      return false;\n    }\n\n    try {\n      // Get user profile to check role\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select('id, role, full_name, company_id')\n        .eq('id', session.user.id)\n        .single();\n\n      if (error) {\n        console.error('❌ Error fetching profile:', error);\n        return false;\n      }\n\n      if (!profileData) {\n        console.log('❌ No profile found for user');\n        return false;\n      }\n\n      console.log('👤 Profile loaded:', profileData);\n\n      // Check if user has SUPER_ADMIN role\n      if (profileData.role !== 'SUPER_ADMIN') {\n        console.log('❌ User is not SUPER_ADMIN, role:', profileData.role);\n        return false;\n      }\n\n      console.log('✅ SUPER_ADMIN access confirmed');\n      setProfile(profileData);\n      return true;\n    } catch (error) {\n      console.error('❌ Error checking super admin access:', error);\n      return false;\n    }\n  };\n\n  const initializeAuth = async () => {\n    try {\n      console.log('🔍 Initializing Admin Dashboard authentication...');\n      \n      // Get current session\n      const { data: { session }, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        console.error('❌ Error getting session:', error);\n        setLoading(false);\n        return;\n      }\n\n      if (!session) {\n        console.log('❌ No session found - user needs to log in');\n        setLoading(false);\n        return;\n      }\n\n      console.log('✅ Session found for user:', session.user.email);\n      \n      // Check SUPER_ADMIN access\n      const hasAccess = await checkSuperAdminAccess(session);\n      \n      if (hasAccess) {\n        setUser(session.user);\n        setIsAuthenticated(true);\n        setIsSuperAdmin(true);\n        console.log('✅ Admin Dashboard access granted');\n      } else {\n        console.log('❌ Access denied - user needs SUPER_ADMIN role');\n        // Don't redirect - let AdminRoute handle the access denied screen\n        setUser(session.user);\n        setIsAuthenticated(true);\n        setIsSuperAdmin(false);\n      }\n    } catch (error) {\n      console.error('❌ Error initializing auth:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    initializeAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('🔐 Admin auth state changed:', event);\n      \n      if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setIsAuthenticated(false);\n        setIsSuperAdmin(false);\n        console.log('👋 User signed out');\n      } else if (event === 'SIGNED_IN' && session) {\n        console.log('👋 User signed in:', session.user.email);\n        const hasAccess = await checkSuperAdminAccess(session);\n        \n        if (hasAccess) {\n          setUser(session.user);\n          setIsAuthenticated(true);\n          setIsSuperAdmin(true);\n        } else {\n          // Redirect non-admin users\n          window.location.href = 'http://localhost:3000/app';\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n      setProfile(null);\n      setIsAuthenticated(false);\n      setIsSuperAdmin(false);\n    } catch (error) {\n      console.error('Error signing out:', error);\n    }\n  };\n\n  const value = {\n    user,\n    profile,\n    loading,\n    isAuthenticated,\n    isSuperAdmin,\n    signOut\n  };\n\n  return (\n    <AdminAuthContext.Provider value={value}>\n      {children}\n    </AdminAuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}