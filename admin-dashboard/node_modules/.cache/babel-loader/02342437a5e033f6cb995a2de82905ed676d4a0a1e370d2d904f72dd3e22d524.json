{"ast":null,"code":"var _jsxFileName = \"D:\\\\TradeMate Pro Webapp\\\\admin-dashboard\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        console.log('üîç Admin Dashboard - Checking authentication...');\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('‚ùå Admin Dashboard - Auth error:', error);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n        if (!session || !session.user) {\n          console.log('‚ùå Admin Dashboard - No session found');\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user profile\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('profiles').select('id, first_name, last_name, role, company_id').eq('id', session.user.id).single();\n        if (profileError || !profile) {\n          console.error('‚ùå Admin Dashboard - Profile error:', profileError);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Only allow APP_OWNER role for admin dashboard\n        if (profile.role !== 'APP_OWNER') {\n          console.log('‚ùå Admin Dashboard - Insufficient permissions. Role:', profile.role);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n        const userData = {\n          id: profile.id,\n          email: session.user.email,\n          full_name: `${profile.first_name || ''} ${profile.last_name || ''}`.trim(),\n          role: profile.role,\n          company_id: profile.company_id\n        };\n        console.log('‚úÖ Admin Dashboard - Authentication successful:', userData.email);\n        setUser(userData);\n      } catch (error) {\n        console.error('‚ùå Admin Dashboard - Auth check failed:', error);\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('üîê Admin Dashboard - Auth state changed:', event);\n      if (event === 'SIGNED_OUT' || !session) {\n        setUser(null);\n        setLoading(false);\n      } else if (event === 'TOKEN_REFRESHED') {\n        // Only check auth on token refresh, not on SIGNED_IN to prevent double login\n        checkAuth();\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('üîê Admin Dashboard - Attempting login:', email);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        throw new Error(error.message);\n      }\n      return data;\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Login failed:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Logout failed:', error);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","console","log","data","session","error","auth","getSession","profile","profileError","from","select","eq","id","single","role","userData","email","full_name","first_name","last_name","trim","company_id","subscription","onAuthStateChange","event","unsubscribe","login","password","signInWithPassword","message","logout","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        console.log('üîç Admin Dashboard - Checking authentication...');\n        \n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('‚ùå Admin Dashboard - Auth error:', error);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        if (!session || !session.user) {\n          console.log('‚ùå Admin Dashboard - No session found');\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user profile\n        const { data: profile, error: profileError } = await supabase\n          .from('profiles')\n          .select('id, first_name, last_name, role, company_id')\n          .eq('id', session.user.id)\n          .single();\n\n        if (profileError || !profile) {\n          console.error('‚ùå Admin Dashboard - Profile error:', profileError);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Only allow APP_OWNER role for admin dashboard\n        if (profile.role !== 'APP_OWNER') {\n          console.log('‚ùå Admin Dashboard - Insufficient permissions. Role:', profile.role);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        const userData = {\n          id: profile.id,\n          email: session.user.email,\n          full_name: `${profile.first_name || ''} ${profile.last_name || ''}`.trim(),\n          role: profile.role,\n          company_id: profile.company_id\n        };\n\n        console.log('‚úÖ Admin Dashboard - Authentication successful:', userData.email);\n        setUser(userData);\n        \n      } catch (error) {\n        console.error('‚ùå Admin Dashboard - Auth check failed:', error);\n        setUser(null);\n      }\n      \n      setLoading(false);\n    };\n\n    checkAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('üîê Admin Dashboard - Auth state changed:', event);\n\n      if (event === 'SIGNED_OUT' || !session) {\n        setUser(null);\n        setLoading(false);\n      } else if (event === 'TOKEN_REFRESHED') {\n        // Only check auth on token refresh, not on SIGNED_IN to prevent double login\n        checkAuth();\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      console.log('üîê Admin Dashboard - Attempting login:', email);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Login failed:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Logout failed:', error);\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}