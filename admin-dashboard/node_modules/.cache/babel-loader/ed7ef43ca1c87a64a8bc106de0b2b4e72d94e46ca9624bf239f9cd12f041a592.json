{"ast":null,"code":"var _jsxFileName = \"D:\\\\TradeMate Pro Webapp\\\\admin-dashboard\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let mounted = true;\n    const checkAuth = async () => {\n      if (!mounted) return;\n      try {\n        console.log('üîç Admin Dashboard - Checking authentication...');\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (!mounted) return;\n        if (error) {\n          console.error('‚ùå Admin Dashboard - Auth error:', error);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n        if (!session || !session.user) {\n          console.log('‚ùå Admin Dashboard - No session found');\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user record first\n        const {\n          data: userRecord,\n          error: userError\n        } = await supabase.from('users').select('id, role, company_id, auth_user_id').eq('auth_user_id', session.user.id).single();\n        if (!mounted) return;\n        if (userError || !userRecord) {\n          console.error('‚ùå Admin Dashboard - User record error:', userError);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Only allow APP_OWNER role for admin dashboard\n        if (userRecord.role !== 'APP_OWNER') {\n          console.log('‚ùå Admin Dashboard - Insufficient permissions. Role:', userRecord.role);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get profile separately to avoid join issues\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('profiles').select('first_name, last_name').eq('user_id', userRecord.id).single();\n        if (profileError) {\n          console.warn('‚ö†Ô∏è Admin Dashboard - Profile not found:', profileError.message);\n        }\n        const userData = {\n          id: userRecord.id,\n          email: session.user.email,\n          full_name: `${(profile === null || profile === void 0 ? void 0 : profile.first_name) || ''} ${(profile === null || profile === void 0 ? void 0 : profile.last_name) || ''}`.trim(),\n          role: userRecord.role,\n          company_id: userRecord.company_id\n        };\n        console.log('‚úÖ Admin Dashboard - Authentication successful:', userData.email);\n        setUser(userData);\n      } catch (error) {\n        console.error('‚ùå Admin Dashboard - Auth check failed:', error);\n        if (mounted) {\n          setUser(null);\n        }\n      }\n      if (mounted) {\n        setLoading(false);\n      }\n    };\n\n    // Initial check\n    checkAuth();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (!mounted) return;\n      console.log('üîê Admin Dashboard - Auth state changed:', event);\n      if (event === 'SIGNED_OUT' || !session) {\n        setUser(null);\n        setLoading(false);\n      } else if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        // Small delay to prevent race conditions\n        setTimeout(() => {\n          if (mounted) checkAuth();\n        }, 100);\n      }\n    });\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('üîê Admin Dashboard - Attempting login:', email);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        throw new Error(error.message);\n      }\n      console.log('üîê Admin Dashboard - Login API successful, waiting for user state...');\n\n      // Wait for user state to be updated with longer timeout\n      return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          console.error('‚ùå Admin Dashboard - Login timeout after 10 seconds');\n          reject(new Error('Login timeout - user state not updated. Please try again.'));\n        }, 10000); // Increased from 5 to 10 seconds\n\n        let attempts = 0;\n        const maxAttempts = 100; // 10 seconds with 100ms intervals\n\n        const checkUser = () => {\n          attempts++;\n          if (user) {\n            clearTimeout(timeout);\n            console.log('üîê Admin Dashboard - User state updated, login complete');\n            resolve(data);\n          } else if (attempts >= maxAttempts) {\n            clearTimeout(timeout);\n            console.error('‚ùå Admin Dashboard - Max attempts reached, login failed');\n            reject(new Error('Login failed - max attempts reached. Please try again.'));\n          } else {\n            setTimeout(checkUser, 100);\n          }\n        };\n        checkUser();\n      });\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Login failed:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Logout failed:', error);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","mounted","checkAuth","console","log","data","session","error","auth","getSession","userRecord","userError","from","select","eq","id","single","role","profile","profileError","warn","message","userData","email","full_name","first_name","last_name","trim","company_id","subscription","onAuthStateChange","event","setTimeout","unsubscribe","login","password","signInWithPassword","Promise","resolve","reject","timeout","attempts","maxAttempts","checkUser","clearTimeout","logout","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const checkAuth = async () => {\n      if (!mounted) return;\n\n      try {\n        console.log('üîç Admin Dashboard - Checking authentication...');\n\n        const { data: { session }, error } = await supabase.auth.getSession();\n\n        if (!mounted) return;\n\n        if (error) {\n          console.error('‚ùå Admin Dashboard - Auth error:', error);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        if (!session || !session.user) {\n          console.log('‚ùå Admin Dashboard - No session found');\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user record first\n        const { data: userRecord, error: userError } = await supabase\n          .from('users')\n          .select('id, role, company_id, auth_user_id')\n          .eq('auth_user_id', session.user.id)\n          .single();\n\n        if (!mounted) return;\n\n        if (userError || !userRecord) {\n          console.error('‚ùå Admin Dashboard - User record error:', userError);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Only allow APP_OWNER role for admin dashboard\n        if (userRecord.role !== 'APP_OWNER') {\n          console.log('‚ùå Admin Dashboard - Insufficient permissions. Role:', userRecord.role);\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get profile separately to avoid join issues\n        const { data: profile, error: profileError } = await supabase\n          .from('profiles')\n          .select('first_name, last_name')\n          .eq('user_id', userRecord.id)\n          .single();\n\n        if (profileError) {\n          console.warn('‚ö†Ô∏è Admin Dashboard - Profile not found:', profileError.message);\n        }\n\n        const userData = {\n          id: userRecord.id,\n          email: session.user.email,\n          full_name: `${profile?.first_name || ''} ${profile?.last_name || ''}`.trim(),\n          role: userRecord.role,\n          company_id: userRecord.company_id\n        };\n\n        console.log('‚úÖ Admin Dashboard - Authentication successful:', userData.email);\n        setUser(userData);\n\n      } catch (error) {\n        console.error('‚ùå Admin Dashboard - Auth check failed:', error);\n        if (mounted) {\n          setUser(null);\n        }\n      }\n\n      if (mounted) {\n        setLoading(false);\n      }\n    };\n\n    // Initial check\n    checkAuth();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (!mounted) return;\n\n      console.log('üîê Admin Dashboard - Auth state changed:', event);\n\n      if (event === 'SIGNED_OUT' || !session) {\n        setUser(null);\n        setLoading(false);\n      } else if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n        // Small delay to prevent race conditions\n        setTimeout(() => {\n          if (mounted) checkAuth();\n        }, 100);\n      }\n    });\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      console.log('üîê Admin Dashboard - Attempting login:', email);\n\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      console.log('üîê Admin Dashboard - Login API successful, waiting for user state...');\n\n      // Wait for user state to be updated with longer timeout\n      return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          console.error('‚ùå Admin Dashboard - Login timeout after 10 seconds');\n          reject(new Error('Login timeout - user state not updated. Please try again.'));\n        }, 10000); // Increased from 5 to 10 seconds\n\n        let attempts = 0;\n        const maxAttempts = 100; // 10 seconds with 100ms intervals\n\n        const checkUser = () => {\n          attempts++;\n\n          if (user) {\n            clearTimeout(timeout);\n            console.log('üîê Admin Dashboard - User state updated, login complete');\n            resolve(data);\n          } else if (attempts >= maxAttempts) {\n            clearTimeout(timeout);\n            console.error('‚ùå Admin Dashboard - Max attempts reached, login failed');\n            reject(new Error('Login failed - max attempts reached. Please try again.'));\n          } else {\n            setTimeout(checkUser, 100);\n          }\n        };\n\n        checkUser();\n      });\n\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Login failed:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await supabase.auth.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error('‚ùå Admin Dashboard - Logout failed:', error);\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,IAAIgB,OAAO,GAAG,IAAI;IAElB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI,CAACD,OAAO,EAAE;MAEd,IAAI;QACFE,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAE9D,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAQ,CAAC;UAAEC;QAAM,CAAC,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAACC,UAAU,CAAC,CAAC;QAErE,IAAI,CAACR,OAAO,EAAE;QAEd,IAAIM,KAAK,EAAE;UACTJ,OAAO,CAACI,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;UACvDT,OAAO,CAAC,IAAI,CAAC;UACbE,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;QAEA,IAAI,CAACM,OAAO,IAAI,CAACA,OAAO,CAACT,IAAI,EAAE;UAC7BM,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;UACnDN,OAAO,CAAC,IAAI,CAAC;UACbE,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;;QAEA;QACA,MAAM;UAAEK,IAAI,EAAEK,UAAU;UAAEH,KAAK,EAAEI;QAAU,CAAC,GAAG,MAAMzB,QAAQ,CAC1D0B,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,oCAAoC,CAAC,CAC5CC,EAAE,CAAC,cAAc,EAAER,OAAO,CAACT,IAAI,CAACkB,EAAE,CAAC,CACnCC,MAAM,CAAC,CAAC;QAEX,IAAI,CAACf,OAAO,EAAE;QAEd,IAAIU,SAAS,IAAI,CAACD,UAAU,EAAE;UAC5BP,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEI,SAAS,CAAC;UAClEb,OAAO,CAAC,IAAI,CAAC;UACbE,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;;QAEA;QACA,IAAIU,UAAU,CAACO,IAAI,KAAK,WAAW,EAAE;UACnCd,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEM,UAAU,CAACO,IAAI,CAAC;UACnFnB,OAAO,CAAC,IAAI,CAAC;UACbE,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;;QAEA;QACA,MAAM;UAAEK,IAAI,EAAEa,OAAO;UAAEX,KAAK,EAAEY;QAAa,CAAC,GAAG,MAAMjC,QAAQ,CAC1D0B,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,uBAAuB,CAAC,CAC/BC,EAAE,CAAC,SAAS,EAAEJ,UAAU,CAACK,EAAE,CAAC,CAC5BC,MAAM,CAAC,CAAC;QAEX,IAAIG,YAAY,EAAE;UAChBhB,OAAO,CAACiB,IAAI,CAAC,yCAAyC,EAAED,YAAY,CAACE,OAAO,CAAC;QAC/E;QAEA,MAAMC,QAAQ,GAAG;UACfP,EAAE,EAAEL,UAAU,CAACK,EAAE;UACjBQ,KAAK,EAAEjB,OAAO,CAACT,IAAI,CAAC0B,KAAK;UACzBC,SAAS,EAAE,GAAG,CAAAN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,UAAU,KAAI,EAAE,IAAI,CAAAP,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,SAAS,KAAI,EAAE,EAAE,CAACC,IAAI,CAAC,CAAC;UAC5EV,IAAI,EAAEP,UAAU,CAACO,IAAI;UACrBW,UAAU,EAAElB,UAAU,CAACkB;QACzB,CAAC;QAEDzB,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEkB,QAAQ,CAACC,KAAK,CAAC;QAC7EzB,OAAO,CAACwB,QAAQ,CAAC;MAEnB,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D,IAAIN,OAAO,EAAE;UACXH,OAAO,CAAC,IAAI,CAAC;QACf;MACF;MAEA,IAAIG,OAAO,EAAE;QACXD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAE,SAAS,CAAC,CAAC;;IAEX;IACA,MAAM;MAAEG,IAAI,EAAE;QAAEwB;MAAa;IAAE,CAAC,GAAG3C,QAAQ,CAACsB,IAAI,CAACsB,iBAAiB,CAAC,OAAOC,KAAK,EAAEzB,OAAO,KAAK;MAC3F,IAAI,CAACL,OAAO,EAAE;MAEdE,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE2B,KAAK,CAAC;MAE9D,IAAIA,KAAK,KAAK,YAAY,IAAI,CAACzB,OAAO,EAAE;QACtCR,OAAO,CAAC,IAAI,CAAC;QACbE,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,MAAM,IAAI+B,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,iBAAiB,EAAE;QAC/D;QACAC,UAAU,CAAC,MAAM;UACf,IAAI/B,OAAO,EAAEC,SAAS,CAAC,CAAC;QAC1B,CAAC,EAAE,GAAG,CAAC;MACT;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXD,OAAO,GAAG,KAAK;MACf4B,YAAY,CAACI,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAG,MAAAA,CAAOX,KAAK,EAAEY,QAAQ,KAAK;IACvC,IAAI;MACFhC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEmB,KAAK,CAAC;MAE5D,MAAM;QAAElB,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC4B,kBAAkB,CAAC;QAC7Db,KAAK;QACLY;MACF,CAAC,CAAC;MAEF,IAAI5B,KAAK,EAAE;QACT,MAAM,IAAId,KAAK,CAACc,KAAK,CAACc,OAAO,CAAC;MAChC;MAEAlB,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;;MAEnF;MACA,OAAO,IAAIiC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,MAAMC,OAAO,GAAGR,UAAU,CAAC,MAAM;UAC/B7B,OAAO,CAACI,KAAK,CAAC,oDAAoD,CAAC;UACnEgC,MAAM,CAAC,IAAI9C,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAChF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;QAEX,IAAIgD,QAAQ,GAAG,CAAC;QAChB,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;;QAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;UACtBF,QAAQ,EAAE;UAEV,IAAI5C,IAAI,EAAE;YACR+C,YAAY,CAACJ,OAAO,CAAC;YACrBrC,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;YACtEkC,OAAO,CAACjC,IAAI,CAAC;UACf,CAAC,MAAM,IAAIoC,QAAQ,IAAIC,WAAW,EAAE;YAClCE,YAAY,CAACJ,OAAO,CAAC;YACrBrC,OAAO,CAACI,KAAK,CAAC,wDAAwD,CAAC;YACvEgC,MAAM,CAAC,IAAI9C,KAAK,CAAC,wDAAwD,CAAC,CAAC;UAC7E,CAAC,MAAM;YACLuC,UAAU,CAACW,SAAS,EAAE,GAAG,CAAC;UAC5B;QACF,CAAC;QAEDA,SAAS,CAAC,CAAC;MACb,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMsC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAM3D,QAAQ,CAACsB,IAAI,CAACsC,OAAO,CAAC,CAAC;MAC7BhD,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;EAED,MAAMwC,KAAK,GAAG;IACZlD,IAAI;IACJE,OAAO;IACPmC,KAAK;IACLW;EACF,CAAC;EAED,oBACEzD,OAAA,CAACC,WAAW,CAAC2D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApD,QAAA,EAChCA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxD,GAAA,CA1LWF,YAAY;AAAA2D,EAAA,GAAZ3D,YAAY;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}