{"ast":null,"code":"import { supabase, supabaseService } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      tempPassword\n    } = formData;\n    try {\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Step 1: Create the company\n      const {\n        data: company,\n        error: companyError\n      } = await supabase.from('companies').insert({\n        name: companyName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (companyError) {\n        console.error('‚ùå Company creation failed:', companyError);\n        throw new Error(`Failed to create company: ${companyError.message}`);\n      }\n      console.log('‚úÖ Company created:', company);\n\n      // Step 2: Create user invitation record\n      console.log('‚úÖ Company created successfully');\n      console.log('üìß Creating invitation for owner:', ownerEmail);\n\n      // Create invitation record (you can create this table later)\n      const invitation = {\n        company_id: company.id,\n        email: ownerEmail,\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        phone: ownerPhone,\n        role: 'OWNER',\n        temp_password: tempPassword,\n        status: 'PENDING',\n        created_at: new Date().toISOString()\n      };\n      console.log('üìã Invitation created:', invitation);\n      console.log('üéâ Company creation completed successfully!');\n      return {\n        company,\n        profile,\n        success: true,\n        message: `Company created successfully! Owner ${ownerEmail} will need to sign up separately.`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseService","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","tempPassword","console","log","data","company","error","companyError","from","insert","name","created_at","Date","toISOString","select","single","Error","message","invitation","company_id","id","email","first_name","last_name","phone","role","temp_password","status","profile","success","getAllCompanies","companies","order","ascending","length","getCompanyDetails","companyId","functions","invoke","body"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseService } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Step 1: Create the company\r\n      const { data: company, error: companyError } = await supabase\r\n        .from('companies')\r\n        .insert({\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        console.error('‚ùå Company creation failed:', companyError);\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company created:', company);\r\n\r\n      // Step 2: Create user invitation record\r\n      console.log('‚úÖ Company created successfully');\r\n      console.log('üìß Creating invitation for owner:', ownerEmail);\r\n\r\n      // Create invitation record (you can create this table later)\r\n      const invitation = {\r\n        company_id: company.id,\r\n        email: ownerEmail,\r\n        first_name: ownerFirstName,\r\n        last_name: ownerLastName,\r\n        phone: ownerPhone,\r\n        role: 'OWNER',\r\n        temp_password: tempPassword,\r\n        status: 'PENDING',\r\n        created_at: new Date().toISOString()\r\n      };\r\n\r\n      console.log('üìã Invitation created:', invitation);\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n\r\n      return {\r\n        company,\r\n        profile,\r\n        success: true,\r\n        message: `Company created successfully! Owner ${ownerEmail} will need to sign up separately.`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}