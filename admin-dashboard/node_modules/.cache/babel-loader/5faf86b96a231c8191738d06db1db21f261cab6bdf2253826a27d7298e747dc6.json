{"ast":null,"code":"import { supabase } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      tempPassword\n    } = formData;\n    try {\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\n      console.log('üìù Form data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail,\n        ownerPhone\n      });\n\n      // Step 1: Create the company\n      const {\n        data: company,\n        error: companyError\n      } = await supabase.from('companies').insert({\n        name: companyName,\n        created_at: new Date().toISOString()\n      }).select().single();\n      if (companyError) {\n        console.error('‚ùå Company creation failed:', companyError);\n        throw new Error(`Failed to create company: ${companyError.message}`);\n      }\n      console.log('‚úÖ Company created:', company);\n\n      // Step 2: Create auth user (this requires service role key)\n      const {\n        data: authUser,\n        error: authError\n      } = await supabase.auth.admin.createUser({\n        email: ownerEmail,\n        password: tempPassword,\n        email_confirm: true,\n        user_metadata: {\n          role: 'OWNER'\n        }\n      });\n      if (authError) {\n        console.error('‚ùå Auth user creation failed:', authError);\n        throw new Error(`Failed to create user: ${authError.message}`);\n      }\n      console.log('‚úÖ Auth user created:', authUser.user.email);\n\n      // Step 3: Create profile\n      const {\n        data: profile,\n        error: profileError\n      } = await supabase.from('profiles').insert({\n        id: authUser.user.id,\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        email: ownerEmail,\n        phone: ownerPhone,\n        role: 'OWNER',\n        company_id: company.id\n      }).select().single();\n      if (profileError) {\n        console.error('‚ùå Profile creation failed:', profileError);\n        throw new Error(`Failed to create profile: ${profileError.message}`);\n      }\n      console.log('üéâ Company creation completed successfully!');\n      return {\n        company,\n        authUser: authUser.user,\n        profile,\n        success: true\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation workflow failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","tempPassword","console","log","data","company","error","companyError","from","insert","name","created_at","Date","toISOString","select","single","Error","message","authUser","authError","auth","admin","createUser","email","password","email_confirm","user_metadata","role","user","profile","profileError","id","first_name","last_name","phone","company_id","success","getAllCompanies","companies","order","ascending","length","getCompanyDetails","companyId","functions","invoke","body"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * Complete Company Creation Workflow - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Starting company creation - DIRECT DATABASE...');\r\n      console.log('üìù Form data:', { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone });\r\n\r\n      // Step 1: Create the company\r\n      const { data: company, error: companyError } = await supabase\r\n        .from('companies')\r\n        .insert({\r\n          name: companyName,\r\n          created_at: new Date().toISOString()\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) {\r\n        console.error('‚ùå Company creation failed:', companyError);\r\n        throw new Error(`Failed to create company: ${companyError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company created:', company);\r\n\r\n      // Step 2: Create auth user (this requires service role key)\r\n      const { data: authUser, error: authError } = await supabase.auth.admin.createUser({\r\n        email: ownerEmail,\r\n        password: tempPassword,\r\n        email_confirm: true,\r\n        user_metadata: { role: 'OWNER' }\r\n      });\r\n\r\n      if (authError) {\r\n        console.error('‚ùå Auth user creation failed:', authError);\r\n        throw new Error(`Failed to create user: ${authError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Auth user created:', authUser.user.email);\r\n\r\n      // Step 3: Create profile\r\n      const { data: profile, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .insert({\r\n          id: authUser.user.id,\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          email: ownerEmail,\r\n          phone: ownerPhone,\r\n          role: 'OWNER',\r\n          company_id: company.id\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (profileError) {\r\n        console.error('‚ùå Profile creation failed:', profileError);\r\n        throw new Error(`Failed to create profile: ${profileError.message}`);\r\n      }\r\n\r\n      console.log('üéâ Company creation completed successfully!');\r\n\r\n      return {\r\n        company,\r\n        authUser: authUser.user,\r\n        profile,\r\n        success: true\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}