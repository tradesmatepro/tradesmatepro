{"ast":null,"code":"import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\n\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\nexport class CompanyService {\n  /**\r\n   * SIMPLIFIED Company Creation - Direct SQL via Edge Function\r\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    try {\n      console.log('üöÄ Creating company via single atomic operation...');\n      console.log('üìù Data:', {\n        companyName,\n        ownerFirstName,\n        ownerLastName,\n        ownerEmail\n      });\n\n      // Format phone\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone;\n        }\n      }\n\n      // Call Edge Function to do everything in one transaction\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('admin-create-company', {\n        body: {\n          companyName,\n          ownerFirstName,\n          ownerLastName,\n          ownerEmail,\n          ownerPhone: formattedPhone,\n          ownerRole: ownerRole.toLowerCase(),\n          // Ensure lowercase for enum\n          tempPassword\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function error:', error);\n        throw new Error(error.message || 'Failed to create company');\n      }\n      if (!data || !data.success) {\n        throw new Error((data === null || data === void 0 ? void 0 : data.error) || 'Company creation failed');\n      }\n      console.log('‚úÖ Company created successfully:', data.company.company_number);\n      return {\n        ...data,\n        message: `‚úÖ Complete! Company: ${data.company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå Company creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * LEGACY/FALLBACK: Direct database creation (for local dev only)\r\n   */\n  static async createCompanyWithOwnerDirect(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      ownerRole,\n      tempPassword\n    } = formData;\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\n    let createdCompanyId = null;\n    let createdAuthUserId = null;\n    try {\n      console.log('üöÄ DIRECT DB: Creating company...');\n\n      // Format phone\n      let formattedPhone = null;\n      if (ownerPhone && ownerPhone.trim()) {\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\n        if (digitsOnly.length === 10) {\n          formattedPhone = `+1${digitsOnly}`;\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\n          formattedPhone = `+${digitsOnly}`;\n        } else if (ownerPhone.startsWith('+')) {\n          formattedPhone = ownerPhone;\n        }\n      }\n\n      // Check if auth user exists\n      let authUserId = null;\n      let authUserExists = false;\n      if (hasAdminBypass && supabaseAdmin) {\n        const {\n          data: existingAuthUsers\n        } = await supabaseAdmin.auth.admin.listUsers();\n        const existingUser = existingAuthUsers === null || existingAuthUsers === void 0 ? void 0 : existingAuthUsers.users.find(u => u.email === ownerEmail);\n        if (existingUser) {\n          authUserId = existingUser.id;\n          authUserExists = true;\n          console.log('‚ö†Ô∏è  Reusing existing auth user:', authUserId);\n        }\n      }\n\n      // Create auth user if needed\n      if (!authUserExists) {\n        const authResult = await adminCreateUser({\n          email: ownerEmail,\n          password: tempPassword,\n          firstName: ownerFirstName,\n          lastName: ownerLastName,\n          role: ownerRole,\n          jobTitle: 'Owner'\n        });\n        if (!(authResult !== null && authResult !== void 0 && authResult.user)) {\n          throw new Error('Failed to create auth user');\n        }\n        authUserId = authResult.user.id;\n        createdAuthUserId = authUserId;\n        console.log('‚úÖ Auth user created:', authUserId);\n      }\n\n      // Create company\n      const {\n        data: company,\n        error: companyError\n      } = await db.from('companies').insert({\n        name: companyName\n      }).select().single();\n      if (companyError) throw new Error(`Company insert failed: ${companyError.message}`);\n      createdCompanyId = company.id;\n      console.log('‚úÖ Company created:', company.company_number);\n\n      // Create users record - DIRECT INSERT with proper enum casting\n      const {\n        data: userRecord,\n        error: userError\n      } = await db.from('users').insert({\n        id: authUserId,\n        email: ownerEmail,\n        company_id: company.id,\n        role: ownerRole.toLowerCase(),\n        // Must be lowercase for enum\n        status: 'active',\n        // Must be lowercase for enum\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        phone: formattedPhone\n      }).select().single();\n      if (userError) throw new Error(`Users insert failed: ${userError.message}`);\n      console.log('‚úÖ Users record created:', userRecord.id);\n\n      // Create profile\n      const {\n        data: profile,\n        error: profileError\n      } = await db.from('profiles').insert({\n        id: userRecord.id,\n        first_name: ownerFirstName,\n        last_name: ownerLastName,\n        phone: formattedPhone,\n        role: ownerRole.toLowerCase(),\n        // Must be lowercase for enum\n        company_id: company.id\n      }).select().single();\n      if (profileError) throw new Error(`Profile insert failed: ${profileError.message}`);\n      console.log('‚úÖ Profile created');\n      console.log('üéâ DIRECT DB: Company creation complete!');\n      return {\n        company,\n        authUser: {\n          id: authUserId,\n          email: ownerEmail\n        },\n        userRecord,\n        profile,\n        success: true,\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\n      };\n    } catch (error) {\n      console.error('‚ùå DIRECT DB: Failed:', error);\n\n      // Rollback\n      if (createdCompanyId && hasAdminBypass && supabaseAdmin) {\n        console.log('üîÑ Rollback: Deleting company', createdCompanyId);\n        await supabaseAdmin.from('companies').delete().eq('id', createdCompanyId);\n      }\n      if (createdAuthUserId && hasAdminBypass && supabaseAdmin) {\n        console.log('üîÑ Rollback: Deleting auth user', createdAuthUserId);\n        await supabaseAdmin.auth.admin.deleteUser(createdAuthUserId);\n      }\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\n  static async getAllCompanies() {\n    try {\n      console.log('üè¢ Fetching companies directly from database...');\n\n      // Direct database query - simple companies only first\n      const {\n        data: companies,\n        error\n      } = await supabase.from('companies').select(`\n          id,\n          name,\n          created_at,\n          created_by\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('‚ùå Database query failed:', error);\n        throw new Error(`Failed to fetch companies: ${error.message}`);\n      }\n      console.log('‚úÖ Companies fetched successfully:', (companies === null || companies === void 0 ? void 0 : companies.length) || 0);\n      return companies || [];\n    } catch (error) {\n      console.error('‚ùå Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\n\n      // Call secure Edge Function that handles profile fetching with service key\n      const {\n        data,\n        error\n      } = await supabase.functions.invoke('get-company-details', {\n        body: {\n          companyId\n        }\n      });\n      if (error) {\n        console.error('‚ùå Edge Function call failed:', error);\n        throw new Error(`Failed to fetch company details: ${error.message}`);\n      }\n      if (!data.success) {\n        console.error('‚ùå Company details fetch failed:', data.error);\n        throw new Error(data.error || 'Company details fetch failed');\n      }\n      console.log('‚úÖ Company details fetched successfully');\n      return data.company;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\n  static async deleteCompany(companyId) {\n    try {\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\n\n      // Step 1: Get all profiles associated with this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabase.from('profiles').select('id, email').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('‚ùå Error fetching company profiles:', profilesError);\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\n      }\n      console.log('üë• Found profiles to delete:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0);\n\n      // Step 2: Delete auth users (using secure Edge Function)\n      if (profiles && profiles.length > 0) {\n        for (const profile of profiles) {\n          try {\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\n            await adminDeleteUser(profile.id);\n            console.log('‚úÖ Auth user deleted:', profile.email);\n          } catch (error) {\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\n            // Continue with other deletions even if one fails\n          }\n        }\n      }\n\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\n      const {\n        error: profileDeleteError\n      } = await supabase.from('profiles').delete().eq('company_id', companyId);\n      if (profileDeleteError) {\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\n        // Continue with company deletion\n      } else {\n        console.log('‚úÖ Profiles deleted');\n      }\n\n      // Step 4: Delete the company\n      const {\n        error: companyDeleteError\n      } = await supabase.from('companies').delete().eq('id', companyId);\n      if (companyDeleteError) {\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\n      }\n      console.log('‚úÖ Company deletion completed successfully');\n      return {\n        success: true,\n        message: `Company and ${(profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0} associated users deleted successfully`\n      };\n    } catch (error) {\n      console.error('‚ùå Company deletion workflow failed:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","supabaseAdmin","hasAdminBypass","adminCreateUser","adminDeleteUser","CompanyService","createCompanyWithOwner","formData","companyName","ownerFirstName","ownerLastName","ownerEmail","ownerPhone","ownerRole","tempPassword","console","log","formattedPhone","trim","digitsOnly","replace","length","startsWith","data","error","functions","invoke","body","toLowerCase","Error","message","success","company","company_number","name","createCompanyWithOwnerDirect","db","createdCompanyId","createdAuthUserId","authUserId","authUserExists","existingAuthUsers","auth","admin","listUsers","existingUser","users","find","u","email","id","authResult","password","firstName","lastName","role","jobTitle","user","companyError","from","insert","select","single","userRecord","userError","company_id","status","first_name","last_name","phone","profile","profileError","authUser","delete","eq","deleteUser","getAllCompanies","companies","order","ascending","getCompanyDetails","companyId","deleteCompany","profiles","profilesError","profileDeleteError","companyDeleteError"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabase, supabaseAdmin, hasAdminBypass, adminCreateUser, adminDeleteUser } from '../supabaseClient';\r\n\r\n/**\r\n * Industry-Standard Company Creation Service\r\n * Uses secure Edge Functions for all admin operations\r\n */\r\nexport class CompanyService {\r\n\r\n  /**\r\n   * SIMPLIFIED Company Creation - Direct SQL via Edge Function\r\n   */\r\n  static async createCompanyWithOwner(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n\r\n    try {\r\n      console.log('üöÄ Creating company via single atomic operation...');\r\n      console.log('üìù Data:', { companyName, ownerFirstName, ownerLastName, ownerEmail });\r\n\r\n      // Format phone\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone;\r\n        }\r\n      }\r\n\r\n      // Call Edge Function to do everything in one transaction\r\n      const { data, error } = await supabase.functions.invoke('admin-create-company', {\r\n        body: {\r\n          companyName,\r\n          ownerFirstName,\r\n          ownerLastName,\r\n          ownerEmail,\r\n          ownerPhone: formattedPhone,\r\n          ownerRole: ownerRole.toLowerCase(), // Ensure lowercase for enum\r\n          tempPassword\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function error:', error);\r\n        throw new Error(error.message || 'Failed to create company');\r\n      }\r\n\r\n      if (!data || !data.success) {\r\n        throw new Error(data?.error || 'Company creation failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company created successfully:', data.company.company_number);\r\n      return {\r\n        ...data,\r\n        message: `‚úÖ Complete! Company: ${data.company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company creation failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * LEGACY/FALLBACK: Direct database creation (for local dev only)\r\n   */\r\n  static async createCompanyWithOwnerDirect(formData) {\r\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, ownerRole, tempPassword } = formData;\r\n    const db = hasAdminBypass && supabaseAdmin ? supabaseAdmin : supabase;\r\n\r\n    let createdCompanyId = null;\r\n    let createdAuthUserId = null;\r\n\r\n    try {\r\n      console.log('üöÄ DIRECT DB: Creating company...');\r\n\r\n      // Format phone\r\n      let formattedPhone = null;\r\n      if (ownerPhone && ownerPhone.trim()) {\r\n        const digitsOnly = ownerPhone.replace(/\\D/g, '');\r\n        if (digitsOnly.length === 10) {\r\n          formattedPhone = `+1${digitsOnly}`;\r\n        } else if (digitsOnly.length === 11 && digitsOnly.startsWith('1')) {\r\n          formattedPhone = `+${digitsOnly}`;\r\n        } else if (ownerPhone.startsWith('+')) {\r\n          formattedPhone = ownerPhone;\r\n        }\r\n      }\r\n\r\n      // Check if auth user exists\r\n      let authUserId = null;\r\n      let authUserExists = false;\r\n\r\n      if (hasAdminBypass && supabaseAdmin) {\r\n        const { data: existingAuthUsers } = await supabaseAdmin.auth.admin.listUsers();\r\n        const existingUser = existingAuthUsers?.users.find(u => u.email === ownerEmail);\r\n        if (existingUser) {\r\n          authUserId = existingUser.id;\r\n          authUserExists = true;\r\n          console.log('‚ö†Ô∏è  Reusing existing auth user:', authUserId);\r\n        }\r\n      }\r\n\r\n      // Create auth user if needed\r\n      if (!authUserExists) {\r\n        const authResult = await adminCreateUser({\r\n          email: ownerEmail,\r\n          password: tempPassword,\r\n          firstName: ownerFirstName,\r\n          lastName: ownerLastName,\r\n          role: ownerRole,\r\n          jobTitle: 'Owner'\r\n        });\r\n\r\n        if (!authResult?.user) {\r\n          throw new Error('Failed to create auth user');\r\n        }\r\n\r\n        authUserId = authResult.user.id;\r\n        createdAuthUserId = authUserId;\r\n        console.log('‚úÖ Auth user created:', authUserId);\r\n      }\r\n\r\n      // Create company\r\n      const { data: company, error: companyError } = await db\r\n        .from('companies')\r\n        .insert({ name: companyName })\r\n        .select()\r\n        .single();\r\n\r\n      if (companyError) throw new Error(`Company insert failed: ${companyError.message}`);\r\n      createdCompanyId = company.id;\r\n      console.log('‚úÖ Company created:', company.company_number);\r\n\r\n      // Create users record - DIRECT INSERT with proper enum casting\r\n      const { data: userRecord, error: userError } = await db\r\n        .from('users')\r\n        .insert({\r\n          id: authUserId,\r\n          email: ownerEmail,\r\n          company_id: company.id,\r\n          role: ownerRole.toLowerCase(), // Must be lowercase for enum\r\n          status: 'active', // Must be lowercase for enum\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          phone: formattedPhone\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (userError) throw new Error(`Users insert failed: ${userError.message}`);\r\n      console.log('‚úÖ Users record created:', userRecord.id);\r\n\r\n      // Create profile\r\n      const { data: profile, error: profileError } = await db\r\n        .from('profiles')\r\n        .insert({\r\n          id: userRecord.id,\r\n          first_name: ownerFirstName,\r\n          last_name: ownerLastName,\r\n          phone: formattedPhone,\r\n          role: ownerRole.toLowerCase(), // Must be lowercase for enum\r\n          company_id: company.id\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (profileError) throw new Error(`Profile insert failed: ${profileError.message}`);\r\n      console.log('‚úÖ Profile created');\r\n\r\n      console.log('üéâ DIRECT DB: Company creation complete!');\r\n      return {\r\n        company,\r\n        authUser: { id: authUserId, email: ownerEmail },\r\n        userRecord,\r\n        profile,\r\n        success: true,\r\n        message: `‚úÖ Complete! Company: ${company.name} | Owner: ${ownerEmail} | Password: ${tempPassword}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå DIRECT DB: Failed:', error);\r\n\r\n      // Rollback\r\n      if (createdCompanyId && hasAdminBypass && supabaseAdmin) {\r\n        console.log('üîÑ Rollback: Deleting company', createdCompanyId);\r\n        await supabaseAdmin.from('companies').delete().eq('id', createdCompanyId);\r\n      }\r\n\r\n      if (createdAuthUserId && hasAdminBypass && supabaseAdmin) {\r\n        console.log('üîÑ Rollback: Deleting auth user', createdAuthUserId);\r\n        await supabaseAdmin.auth.admin.deleteUser(createdAuthUserId);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all companies - SIMPLE DIRECT DATABASE ACCESS\r\n   */\r\n  static async getAllCompanies() {\r\n    try {\r\n      console.log('üè¢ Fetching companies directly from database...');\r\n\r\n      // Direct database query - simple companies only first\r\n      const { data: companies, error } = await supabase\r\n        .from('companies')\r\n        .select(`\r\n          id,\r\n          name,\r\n          created_at,\r\n          created_by\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Database query failed:', error);\r\n        throw new Error(`Failed to fetch companies: ${error.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Companies fetched successfully:', companies?.length || 0);\r\n      return companies || [];\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch companies:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get company details with owner and employees via Edge Function\r\n   */\r\n  static async getCompanyDetails(companyId) {\r\n    try {\r\n      console.log('üè¢ Fetching company details via Edge Function for:', companyId);\r\n\r\n      // Call secure Edge Function that handles profile fetching with service key\r\n      const { data, error } = await supabase.functions.invoke('get-company-details', {\r\n        body: { companyId }\r\n      });\r\n\r\n      if (error) {\r\n        console.error('‚ùå Edge Function call failed:', error);\r\n        throw new Error(`Failed to fetch company details: ${error.message}`);\r\n      }\r\n\r\n      if (!data.success) {\r\n        console.error('‚ùå Company details fetch failed:', data.error);\r\n        throw new Error(data.error || 'Company details fetch failed');\r\n      }\r\n\r\n      console.log('‚úÖ Company details fetched successfully');\r\n      return data.company;\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch company details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete Company and All Associated Data\r\n   */\r\n  static async deleteCompany(companyId) {\r\n    try {\r\n      console.log('üóëÔ∏è Starting company deletion for ID:', companyId);\r\n\r\n      // Step 1: Get all profiles associated with this company\r\n      const { data: profiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email')\r\n        .eq('company_id', companyId);\r\n\r\n      if (profilesError) {\r\n        console.error('‚ùå Error fetching company profiles:', profilesError);\r\n        throw new Error(`Failed to fetch company profiles: ${profilesError.message}`);\r\n      }\r\n\r\n      console.log('üë• Found profiles to delete:', profiles?.length || 0);\r\n\r\n      // Step 2: Delete auth users (using secure Edge Function)\r\n      if (profiles && profiles.length > 0) {\r\n        for (const profile of profiles) {\r\n          try {\r\n            console.log('üîê Deleting auth user via Edge Function:', profile.email);\r\n            await adminDeleteUser(profile.id);\r\n            console.log('‚úÖ Auth user deleted:', profile.email);\r\n          } catch (error) {\r\n            console.error('‚ùå Error deleting auth user:', profile.email, error);\r\n            // Continue with other deletions even if one fails\r\n          }\r\n        }\r\n      }\r\n\r\n      // Step 3: Delete profiles (cascade should handle this, but let's be explicit)\r\n      const { error: profileDeleteError } = await supabase\r\n        .from('profiles')\r\n        .delete()\r\n        .eq('company_id', companyId);\r\n\r\n      if (profileDeleteError) {\r\n        console.error('‚ùå Error deleting profiles:', profileDeleteError);\r\n        // Continue with company deletion\r\n      } else {\r\n        console.log('‚úÖ Profiles deleted');\r\n      }\r\n\r\n      // Step 4: Delete the company\r\n      const { error: companyDeleteError } = await supabase\r\n        .from('companies')\r\n        .delete()\r\n        .eq('id', companyId);\r\n\r\n      if (companyDeleteError) {\r\n        console.error('‚ùå Company deletion failed:', companyDeleteError);\r\n        throw new Error(`Failed to delete company: ${companyDeleteError.message}`);\r\n      }\r\n\r\n      console.log('‚úÖ Company deletion completed successfully');\r\n\r\n      return {\r\n        success: true,\r\n        message: `Company and ${profiles?.length || 0} associated users deleted successfully`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Company deletion workflow failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}