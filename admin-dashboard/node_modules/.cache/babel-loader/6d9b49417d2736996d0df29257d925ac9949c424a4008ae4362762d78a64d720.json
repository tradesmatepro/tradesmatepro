{"ast":null,"code":"import { supabaseAnon, supabaseService } from '../supabaseClient';\n\n/**\n * Industry-Standard Company Creation Service\n * Follows exact 3-step workflow as specified\n */\nexport class CompanyService {\n  /**\n   * Step A: Create a New Company\n   * Insert company record with basic info (using anon client)\n   */\n  static async createCompany(companyName) {\n    try {\n      console.log('🏢 Step A: Creating company:', companyName);\n      const {\n        data: company,\n        error\n      } = await supabaseAnon.from('companies').insert({\n        name: companyName\n      }).select().single();\n      if (error) {\n        console.error('❌ Error creating company:', error);\n        throw new Error(`Failed to create company: ${error.message}`);\n      }\n      console.log('✅ Company created:', company);\n      return company;\n    } catch (error) {\n      console.error('❌ Company creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Step B: Create the Owner Auth Account\n   * Use Supabase Admin API to create authenticated user\n   */\n  static async createOwnerAuthAccount(ownerEmail, tempPassword) {\n    try {\n      var _authUser$user;\n      console.log('👤 Step B: Creating owner auth account for:', ownerEmail);\n      const {\n        data: authUser,\n        error: authError\n      } = await supabaseService.auth.admin.createUser({\n        email: ownerEmail,\n        password: tempPassword,\n        email_confirm: true\n      });\n      if (authError) {\n        console.error('❌ Error creating auth user:', authError);\n        throw new Error(`Failed to create auth account: ${authError.message}`);\n      }\n      if (!(authUser !== null && authUser !== void 0 && (_authUser$user = authUser.user) !== null && _authUser$user !== void 0 && _authUser$user.id)) {\n        throw new Error('Auth user creation returned no user ID');\n      }\n      console.log('✅ Auth user created:', authUser.user.email, 'ID:', authUser.user.id);\n      return authUser;\n    } catch (error) {\n      console.error('❌ Auth account creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Step C: Create the Owner Profile\n   * Insert profile record using SERVICE KEY (critical!)\n   */\n  static async createOwnerProfile(authUserId, companyId, ownerFirstName, ownerLastName, ownerPhone) {\n    try {\n      console.log('📋 Step C: Creating owner profile for user:', authUserId);\n      console.log('🔑 Using service key for profiles table access');\n      const fullName = `${ownerFirstName} ${ownerLastName}`;\n      const profileData = {\n        id: authUserId,\n        company_id: companyId,\n        role: 'OWNER',\n        full_name: fullName,\n        phone: ownerPhone || null\n      };\n      console.log('📝 Profile data to insert:', profileData);\n\n      // Insert profile record - MUST use service key for profiles table\n      const {\n        data: profile,\n        error: profileError\n      } = await supabaseService.from('profiles').insert(profileData).select().single();\n      if (profileError) {\n        console.error('❌ Error creating profile:', profileError);\n        throw new Error(`Failed to create profile: ${profileError.message}`);\n      }\n      console.log('✅ Profile created:', profile);\n      return profile;\n    } catch (error) {\n      console.error('❌ Owner profile creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Step D: Link Company → Owner Profile\n   * Update company with owner_profile_id reference\n   */\n  static async linkCompanyToOwner(companyId, profileId) {\n    try {\n      console.log('🔗 Step D: Linking company to owner profile:', companyId, '→', profileId);\n      const {\n        error\n      } = await supabaseService.from('companies').update({\n        owner_profile_id: profileId\n      }).eq('id', companyId);\n      if (error) {\n        console.error('❌ Error linking company to owner:', error);\n        throw new Error(`Failed to link company to owner: ${error.message}`);\n      }\n      console.log('✅ Company linked to owner profile');\n    } catch (error) {\n      console.error('❌ Company linking failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Complete Company Creation Workflow\n   * Executes all 3 steps with proper error handling and rollback\n   */\n  static async createCompanyWithOwner(formData) {\n    const {\n      companyName,\n      ownerFirstName,\n      ownerLastName,\n      ownerEmail,\n      ownerPhone,\n      tempPassword\n    } = formData;\n    let createdCompany = null;\n    let createdAuthUser = null;\n    try {\n      console.log('🚀 Starting complete company creation workflow...');\n\n      // Step A: Create Company\n      createdCompany = await this.createCompany(companyName);\n\n      // Step B: Create Owner Auth Account\n      createdAuthUser = await this.createOwnerAuthAccount(ownerEmail, tempPassword);\n\n      // Step C: Create Owner Profile\n      const createdProfile = await this.createOwnerProfile(createdAuthUser.user.id, createdCompany.id, ownerFirstName, ownerLastName, ownerPhone);\n\n      // Step D: Link Company → Owner Profile\n      await this.linkCompanyToOwner(createdCompany.id, createdProfile.id);\n      console.log('🎉 Company creation workflow completed successfully!');\n      return {\n        company: createdCompany,\n        authUser: createdAuthUser,\n        profile: createdProfile,\n        success: true\n      };\n    } catch (error) {\n      console.error('❌ Company creation workflow failed, attempting rollback...');\n\n      // Rollback: Delete created records\n      try {\n        var _createdAuthUser, _createdAuthUser$user, _createdCompany;\n        if ((_createdAuthUser = createdAuthUser) !== null && _createdAuthUser !== void 0 && (_createdAuthUser$user = _createdAuthUser.user) !== null && _createdAuthUser$user !== void 0 && _createdAuthUser$user.id) {\n          console.log('🔄 Rolling back auth user...');\n          await supabaseService.auth.admin.deleteUser(createdAuthUser.user.id);\n        }\n        if ((_createdCompany = createdCompany) !== null && _createdCompany !== void 0 && _createdCompany.id) {\n          console.log('🔄 Rolling back company...');\n          await supabaseAnon.from('companies').delete().eq('id', createdCompany.id);\n        }\n        console.log('✅ Rollback completed');\n      } catch (rollbackError) {\n        console.error('❌ Rollback failed:', rollbackError);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get all companies with owner information and email from auth.users\n   */\n  static async getAllCompanies() {\n    try {\n      // Get companies and find owners via profiles table\n      const {\n        data: companies,\n        error\n      } = await supabaseAnon.from('companies').select(`\n          id,\n          name,\n          created_at\n        `).order('created_at', {\n        ascending: false\n      });\n      if (error) {\n        console.error('❌ Error fetching companies:', error);\n        throw error;\n      }\n\n      // For each company, find the owner (profile with role = 'OWNER')\n      const companiesWithOwners = await Promise.all((companies || []).map(async company => {\n        try {\n          // Find owner profile for this company - use service key for profiles\n          const {\n            data: ownerProfile,\n            error: profileError\n          } = await supabaseService.from('profiles').select('id, full_name, phone').eq('company_id', company.id).eq('role', 'OWNER').single();\n          if (profileError && profileError.code !== 'PGRST116') {\n            console.error('Error fetching owner profile:', profileError);\n          }\n\n          // Get owner email from auth.users if we have an owner\n          let ownerEmail = 'N/A';\n          if (ownerProfile !== null && ownerProfile !== void 0 && ownerProfile.id) {\n            try {\n              var _authUser$user2;\n              const {\n                data: authUser\n              } = await supabaseService.auth.admin.getUserById(ownerProfile.id);\n              ownerEmail = (authUser === null || authUser === void 0 ? void 0 : (_authUser$user2 = authUser.user) === null || _authUser$user2 === void 0 ? void 0 : _authUser$user2.email) || 'N/A';\n            } catch (error) {\n              console.error('Error fetching owner email:', error);\n            }\n          }\n          return {\n            ...company,\n            owner_profile: ownerProfile,\n            owner_email: ownerEmail\n          };\n        } catch (error) {\n          console.error('Error processing company:', error);\n          return {\n            ...company,\n            owner_profile: null,\n            owner_email: 'N/A'\n          };\n        }\n      }));\n      return companiesWithOwners;\n    } catch (error) {\n      console.error('❌ Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get company details with owner and employees, including emails from auth.users\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      const {\n        data: company,\n        error\n      } = await supabaseAnon.from('companies').select(`\n          id,\n          name,\n          created_at\n        `).eq('id', companyId).single();\n      if (error) {\n        console.error('❌ Error fetching company details:', error);\n        throw error;\n      }\n\n      // Get all profiles for this company\n      const {\n        data: profiles,\n        error: profilesError\n      } = await supabaseService.from('profiles').select('id, full_name, role, phone, created_at').eq('company_id', companyId);\n      if (profilesError) {\n        console.error('❌ Error fetching profiles:', profilesError);\n        throw profilesError;\n      }\n\n      // Find owner and employees\n      const owner = profiles === null || profiles === void 0 ? void 0 : profiles.find(p => p.role === 'OWNER');\n      const employees = (profiles === null || profiles === void 0 ? void 0 : profiles.filter(p => p.role !== 'OWNER')) || [];\n\n      // Get owner email\n      let ownerEmail = 'N/A';\n      if (owner !== null && owner !== void 0 && owner.id) {\n        try {\n          var _authUser$user3;\n          const {\n            data: authUser\n          } = await supabaseService.auth.admin.getUserById(owner.id);\n          ownerEmail = (authUser === null || authUser === void 0 ? void 0 : (_authUser$user3 = authUser.user) === null || _authUser$user3 === void 0 ? void 0 : _authUser$user3.email) || 'N/A';\n        } catch (error) {\n          console.error('Error fetching owner email:', error);\n        }\n      }\n\n      // Get employee emails\n      const employeesWithEmails = await Promise.all(employees.map(async employee => {\n        try {\n          var _authUser$user4;\n          const {\n            data: authUser\n          } = await supabaseService.auth.admin.getUserById(employee.id);\n          return {\n            ...employee,\n            email: (authUser === null || authUser === void 0 ? void 0 : (_authUser$user4 = authUser.user) === null || _authUser$user4 === void 0 ? void 0 : _authUser$user4.email) || 'N/A'\n          };\n        } catch (error) {\n          console.error('Error fetching employee email:', error);\n          return {\n            ...employee,\n            email: 'N/A'\n          };\n        }\n      }));\n      return {\n        ...company,\n        owner_profile: owner,\n        owner_email: ownerEmail,\n        employees: employeesWithEmails\n      };\n    } catch (error) {\n      console.error('❌ Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabaseAnon","supabaseService","CompanyService","createCompany","companyName","console","log","data","company","error","from","insert","name","select","single","Error","message","createOwnerAuthAccount","ownerEmail","tempPassword","_authUser$user","authUser","authError","auth","admin","createUser","email","password","email_confirm","user","id","createOwnerProfile","authUserId","companyId","ownerFirstName","ownerLastName","ownerPhone","fullName","profileData","company_id","role","full_name","phone","profile","profileError","linkCompanyToOwner","profileId","update","owner_profile_id","eq","createCompanyWithOwner","formData","createdCompany","createdAuthUser","createdProfile","success","_createdAuthUser","_createdAuthUser$user","_createdCompany","deleteUser","delete","rollbackError","getAllCompanies","companies","order","ascending","companiesWithOwners","Promise","all","map","ownerProfile","code","_authUser$user2","getUserById","owner_profile","owner_email","getCompanyDetails","profiles","profilesError","owner","find","p","employees","filter","_authUser$user3","employeesWithEmails","employee","_authUser$user4"],"sources":["D:/TradeMate Pro Webapp/admin-dashboard/src/services/CompanyService.js"],"sourcesContent":["import { supabaseAnon, supabaseService } from '../supabaseClient';\n\n/**\n * Industry-Standard Company Creation Service\n * Follows exact 3-step workflow as specified\n */\nexport class CompanyService {\n  \n  /**\n   * Step A: Create a New Company\n   * Insert company record with basic info (using anon client)\n   */\n  static async createCompany(companyName) {\n    try {\n      console.log('🏢 Step A: Creating company:', companyName);\n\n      const { data: company, error } = await supabaseAnon\n        .from('companies')\n        .insert({ name: companyName })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('❌ Error creating company:', error);\n        throw new Error(`Failed to create company: ${error.message}`);\n      }\n\n      console.log('✅ Company created:', company);\n      return company;\n    } catch (error) {\n      console.error('❌ Company creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Step B: Create the Owner Auth Account\n   * Use Supabase Admin API to create authenticated user\n   */\n  static async createOwnerAuthAccount(ownerEmail, tempPassword) {\n    try {\n      console.log('👤 Step B: Creating owner auth account for:', ownerEmail);\n\n      const { data: authUser, error: authError } = await supabaseService.auth.admin.createUser({\n        email: ownerEmail,\n        password: tempPassword,\n        email_confirm: true,\n      });\n\n      if (authError) {\n        console.error('❌ Error creating auth user:', authError);\n        throw new Error(`Failed to create auth account: ${authError.message}`);\n      }\n\n      if (!authUser?.user?.id) {\n        throw new Error('Auth user creation returned no user ID');\n      }\n\n      console.log('✅ Auth user created:', authUser.user.email, 'ID:', authUser.user.id);\n      return authUser;\n    } catch (error) {\n      console.error('❌ Auth account creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Step C: Create the Owner Profile\n   * Insert profile record using SERVICE KEY (critical!)\n   */\n  static async createOwnerProfile(authUserId, companyId, ownerFirstName, ownerLastName, ownerPhone) {\n    try {\n      console.log('📋 Step C: Creating owner profile for user:', authUserId);\n      console.log('🔑 Using service key for profiles table access');\n\n      const fullName = `${ownerFirstName} ${ownerLastName}`;\n\n      const profileData = {\n        id: authUserId,\n        company_id: companyId,\n        role: 'OWNER',\n        full_name: fullName,\n        phone: ownerPhone || null,\n      };\n\n      console.log('📝 Profile data to insert:', profileData);\n\n      // Insert profile record - MUST use service key for profiles table\n      const { data: profile, error: profileError } = await supabaseService\n        .from('profiles')\n        .insert(profileData)\n        .select()\n        .single();\n\n      if (profileError) {\n        console.error('❌ Error creating profile:', profileError);\n        throw new Error(`Failed to create profile: ${profileError.message}`);\n      }\n\n      console.log('✅ Profile created:', profile);\n      return profile;\n    } catch (error) {\n      console.error('❌ Owner profile creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Step D: Link Company → Owner Profile\n   * Update company with owner_profile_id reference\n   */\n  static async linkCompanyToOwner(companyId, profileId) {\n    try {\n      console.log('🔗 Step D: Linking company to owner profile:', companyId, '→', profileId);\n\n      const { error } = await supabaseService\n        .from('companies')\n        .update({ owner_profile_id: profileId })\n        .eq('id', companyId);\n\n      if (error) {\n        console.error('❌ Error linking company to owner:', error);\n        throw new Error(`Failed to link company to owner: ${error.message}`);\n      }\n\n      console.log('✅ Company linked to owner profile');\n    } catch (error) {\n      console.error('❌ Company linking failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Complete Company Creation Workflow\n   * Executes all 3 steps with proper error handling and rollback\n   */\n  static async createCompanyWithOwner(formData) {\n    const { companyName, ownerFirstName, ownerLastName, ownerEmail, ownerPhone, tempPassword } = formData;\n    \n    let createdCompany = null;\n    let createdAuthUser = null;\n    \n    try {\n      console.log('🚀 Starting complete company creation workflow...');\n      \n      // Step A: Create Company\n      createdCompany = await this.createCompany(companyName);\n      \n      // Step B: Create Owner Auth Account\n      createdAuthUser = await this.createOwnerAuthAccount(ownerEmail, tempPassword);\n      \n      // Step C: Create Owner Profile\n      const createdProfile = await this.createOwnerProfile(\n        createdAuthUser.user.id,\n        createdCompany.id,\n        ownerFirstName,\n        ownerLastName,\n        ownerPhone\n      );\n\n      // Step D: Link Company → Owner Profile\n      await this.linkCompanyToOwner(createdCompany.id, createdProfile.id);\n\n      console.log('🎉 Company creation workflow completed successfully!');\n      \n      return {\n        company: createdCompany,\n        authUser: createdAuthUser,\n        profile: createdProfile,\n        success: true\n      };\n      \n    } catch (error) {\n      console.error('❌ Company creation workflow failed, attempting rollback...');\n      \n      // Rollback: Delete created records\n      try {\n        if (createdAuthUser?.user?.id) {\n          console.log('🔄 Rolling back auth user...');\n          await supabaseService.auth.admin.deleteUser(createdAuthUser.user.id);\n        }\n\n        if (createdCompany?.id) {\n          console.log('🔄 Rolling back company...');\n          await supabaseAnon.from('companies').delete().eq('id', createdCompany.id);\n        }\n\n        console.log('✅ Rollback completed');\n      } catch (rollbackError) {\n        console.error('❌ Rollback failed:', rollbackError);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Get all companies with owner information and email from auth.users\n   */\n  static async getAllCompanies() {\n    try {\n      // Get companies and find owners via profiles table\n      const { data: companies, error } = await supabaseAnon\n        .from('companies')\n        .select(`\n          id,\n          name,\n          created_at\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('❌ Error fetching companies:', error);\n        throw error;\n      }\n\n      // For each company, find the owner (profile with role = 'OWNER')\n      const companiesWithOwners = await Promise.all(\n        (companies || []).map(async (company) => {\n          try {\n            // Find owner profile for this company - use service key for profiles\n            const { data: ownerProfile, error: profileError } = await supabaseService\n              .from('profiles')\n              .select('id, full_name, phone')\n              .eq('company_id', company.id)\n              .eq('role', 'OWNER')\n              .single();\n\n            if (profileError && profileError.code !== 'PGRST116') {\n              console.error('Error fetching owner profile:', profileError);\n            }\n\n            // Get owner email from auth.users if we have an owner\n            let ownerEmail = 'N/A';\n            if (ownerProfile?.id) {\n              try {\n                const { data: authUser } = await supabaseService.auth.admin.getUserById(ownerProfile.id);\n                ownerEmail = authUser?.user?.email || 'N/A';\n              } catch (error) {\n                console.error('Error fetching owner email:', error);\n              }\n            }\n\n            return {\n              ...company,\n              owner_profile: ownerProfile,\n              owner_email: ownerEmail\n            };\n          } catch (error) {\n            console.error('Error processing company:', error);\n            return {\n              ...company,\n              owner_profile: null,\n              owner_email: 'N/A'\n            };\n          }\n        })\n      );\n\n      return companiesWithOwners;\n    } catch (error) {\n      console.error('❌ Failed to fetch companies:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get company details with owner and employees, including emails from auth.users\n   */\n  static async getCompanyDetails(companyId) {\n    try {\n      const { data: company, error } = await supabaseAnon\n        .from('companies')\n        .select(`\n          id,\n          name,\n          created_at\n        `)\n        .eq('id', companyId)\n        .single();\n\n      if (error) {\n        console.error('❌ Error fetching company details:', error);\n        throw error;\n      }\n\n      // Get all profiles for this company\n      const { data: profiles, error: profilesError } = await supabaseService\n        .from('profiles')\n        .select('id, full_name, role, phone, created_at')\n        .eq('company_id', companyId);\n\n      if (profilesError) {\n        console.error('❌ Error fetching profiles:', profilesError);\n        throw profilesError;\n      }\n\n      // Find owner and employees\n      const owner = profiles?.find(p => p.role === 'OWNER');\n      const employees = profiles?.filter(p => p.role !== 'OWNER') || [];\n\n      // Get owner email\n      let ownerEmail = 'N/A';\n      if (owner?.id) {\n        try {\n          const { data: authUser } = await supabaseService.auth.admin.getUserById(owner.id);\n          ownerEmail = authUser?.user?.email || 'N/A';\n        } catch (error) {\n          console.error('Error fetching owner email:', error);\n        }\n      }\n\n      // Get employee emails\n      const employeesWithEmails = await Promise.all(\n        employees.map(async (employee) => {\n          try {\n            const { data: authUser } = await supabaseService.auth.admin.getUserById(employee.id);\n            return {\n              ...employee,\n              email: authUser?.user?.email || 'N/A'\n            };\n          } catch (error) {\n            console.error('Error fetching employee email:', error);\n            return {\n              ...employee,\n              email: 'N/A'\n            };\n          }\n        })\n      );\n\n      return {\n        ...company,\n        owner_profile: owner,\n        owner_email: ownerEmail,\n        employees: employeesWithEmails\n      };\n    } catch (error) {\n      console.error('❌ Failed to fetch company details:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}